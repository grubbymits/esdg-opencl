#include "llvm/CodeGen/DFAPacketizer.h"
#include "llvm/CodeGen/Passes.h"
#include "llvm/CodeGen/MachineDominators.h"
#include "llvm/CodeGen/MachineFunctionPass.h"
#include "llvm/CodeGen/MachineLoopInfo.h"
#include "llvm/CodeGen/ScheduleDAG.h"
#include "llvm/CodeGen/ScheduleDAGInstrs.h"
#include "llvm/CodeGen/LatencyPriorityQueue.h"
#include "llvm/CodeGen/SchedulerRegistry.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/MachineFunctionAnalysis.h"
#include "llvm/CodeGen/ScheduleHazardRecognizer.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Target/TargetInstrInfo.h"
#include "llvm/Target/TargetRegisterInfo.h"
#include "llvm/ADT/DenseMap.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/Debug.h"
#include "LE1.h"
#include "LE1TargetMachine.h"
#include "LE1RegisterInfo.h"
#include "LE1Subtarget.h"
#include "LE1MachineFunction.h"

#include <map>
#include <iostream>

using namespace llvm;

//class DefaultVLIWScheduler;
/*
namespace llvm {
  class LE1VLIWScheduler : public ScheduleDAGInstrs {
  public:
    LE1VLIWScheduler(MachineFunction &MF, MachineLoopInfo &MLI,
                     MachineDominatorTree &MDT, bool isPostRA);
    void schedule();
  };
}*/

namespace {
  class LE1Packetizer : public MachineFunctionPass {
  public:
    static char ID;
    LE1Packetizer() : MachineFunctionPass(ID) {}

    void getAnalysisUsage(AnalysisUsage &AU) const {
      AU.setPreservesCFG();
      AU.addRequired<MachineDominatorTree>();
      AU.addPreserved<MachineDominatorTree>();
      AU.addRequired<MachineLoopInfo>();
      AU.addPreserved<MachineLoopInfo>();
      MachineFunctionPass::getAnalysisUsage(AU);
    }

    const char *getPassName() const {
      return "LE1 Packetizer";
    }

    bool runOnMachineFunction(MachineFunction &MF);
  };

  char LE1Packetizer::ID = 0;


  class LE1PacketizerList : public VLIWPacketizerList {

    bool Dependence;
    bool FoundSequentialDependence;
    //LE1VLIWScheduler *VLIWScheduler;

    public:
      LE1PacketizerList(MachineFunction &MF, MachineLoopInfo &MLI,
                        MachineDominatorTree &MDT);
      //~LE1PacketizerList();

      virtual void initPacketizerState(void);
      //virtual void PacketizeMIs(MachineBasicBlock *MBB,
        //                        MachineBasicBlock::iterator BeginItr,
          //                      MachineBasicBlock::iterator EndItr);
      virtual bool ignorePseudoInstruction(MachineInstr *I,
                                           MachineBasicBlock *MBB);
      virtual bool isSoloInstruction(MachineInstr *MI);
      virtual bool isLegalToPacketizeTogether(SUnit *SUI, SUnit *SUJ);

      //virtual bool isLegalToPruneDependencies(SUnit *SUI, SUnit *SUJ);

  };

}

bool LE1Packetizer::runOnMachineFunction(MachineFunction &MF) {
  const TargetInstrInfo *TII = MF.getTarget().getInstrInfo();
  MachineLoopInfo &MLI = getAnalysis<MachineLoopInfo>();
  MachineDominatorTree &MDT = getAnalysis<MachineDominatorTree>();

  // Instantiate the packetizer
  LE1PacketizerList Packetizer(MF, MLI, MDT);
  assert(Packetizer.getResourceTracker() && "Empty DFA Table");

  // Loop over all basic blocks and remove KILL pseudo-instructions
  for(MachineFunction::iterator MBBb = MF.begin(), MBBe = MF.end();
      MBBb != MBBe; ++MBBb) {
    MachineBasicBlock::iterator End = MBBb->end();
    MachineBasicBlock::iterator MI = MBBb->begin();
    while (MI != End) {
      if(MI->isKill()) {
        MachineBasicBlock::iterator DeleteMI = MI;
        ++MI;
        MBBb->erase(DeleteMI);
        End = MBBb->end();
        continue;
      }
      ++MI;
    }
  }

  for(MachineFunction::iterator MBBb = MF.begin(), MBBe = MF.end();
      MBBb != MBBe; ++MBBb) {
    // Find scheduling regions and packetize each of them
    unsigned RemainingCount = MBBb->size();
    for(MachineBasicBlock::iterator RegionEnd = MBBb->end();
        RegionEnd != MBBb->begin();) {
      MachineBasicBlock::iterator I = RegionEnd;
      for(;I != MBBb->begin(); --I, --RemainingCount) {
        if(TII->isSchedulingBoundary(llvm::prior(I), MBBb, MF))
          break;
      }
      I = MBBb->begin();

      // Skip empty scheduling regions
      if(I == RegionEnd) {
        RegionEnd = llvm::prior(RegionEnd);
        --RemainingCount;
        continue;
      }
      // Skip regions with one instruction
      if(I == llvm::prior(RegionEnd)) {
        RegionEnd = llvm::prior(RegionEnd);
        continue;
      }

      // if(CurrentPacketMIs.size() <
      //    ResourceTracker->getInstrItins()->Props.IssueWidth)
      Packetizer.PacketizeMIs(MBBb, I, RegionEnd);
      RegionEnd = I;
    }
  }

  return true;
}


static bool doesModifyCalleeSavedRegs(MachineInstr *MI,
                                      const TargetRegisterInfo *TRI) {
  for(const uint16_t *CSR = TRI->getCalleeSavedRegs(); *CSR; ++CSR) {
    unsigned CalleeSavedReg = *CSR;
    if(MI->modifiesRegister(CalleeSavedReg, TRI))
      return true;
  }
  return false;
}

static bool doesCallModifySavedRegs(MachineInstr *MI,
                                    const TargetRegisterInfo *TRI) {
  //if(MI->isCall()) {
    // get the destination function of the call
    //MachineOperand *MO = MI->getOperand(2);
  //}

  return false;
}

static bool isControlFlow(MachineInstr *MI) {
  //if((MI->isCall()) || (MI->isBranch()) || (MI->isReturn()))
  return (MI->getDesc().isTerminator() || MI->getDesc().isCall());
    //return true;
  //else
    //return false;
}

static bool isDirectJump(MachineInstr *MI) {
  if(MI->getOpcode() == LE1::GOTO)
    return true;
  else
    return false;
}
/*
LE1VLIWScheduler::LE1VLIWScheduler(MachineFunction &MF, MachineLoopInfo &MLI,
                                   MachineDominatorTree &MDT, bool isPostRA) :
  ScheduleDAGInstrs(MF, MLI, MDT, IsPostRA) {
    std::cout << "LE1VLIW Constr\n";
    CanHandleTerminators = true;
}

void LE1VLIWScheduler::schedule() {
  // Build the scheduling graph
  std::cout << "VLIW schedule\n";
  buildSchedGraph(0);
}
*/
LE1PacketizerList::LE1PacketizerList(MachineFunction &MF,
                                     MachineLoopInfo &MLI,
                                     MachineDominatorTree &MDT)
  : VLIWPacketizerList(MF, MLI, MDT, true) {
  //VLIWScheduler = new LE1VLIWScheduler(MF, MLI, MDT, true);
}
/*
LE1PacketizerList::~LE1PacketizerList() {
  if(VLIWScheduler)
    delete VLIWScheduler;
  if(ResourceTracker)
    delete ResourceTracker;
}*/

void LE1PacketizerList::initPacketizerState(void) {
  Dependence = false;
  FoundSequentialDependence = false;
}
/*
// PacketizeMIs - Bundle machine instructions into packets.
void LE1PacketizerList::PacketizeMIs(MachineBasicBlock *MBB,
                                     MachineBasicBlock::iterator BeginItr,
                                     MachineBasicBlock::iterator EndItr) {
  assert(VLIWScheduler && "VLIW Scheduler is not initialized!");
  DEBUG(dbgs() << "\nPacketizeMI");
//  this->VLIWScheduler->startBlock(MBB);
  //this->VLIWScheduler->enterRegion(MBB, BeginItr, EndItr, MBB->size());
  //this->VLIWScheduler->schedule();
  VLIWScheduler->startBlock(MBB);
  VLIWScheduler->enterRegion(MBB, BeginItr, EndItr, MBB->size());
  VLIWScheduler->schedule();

  // Generate MI -> SU map.
  MIToSUnit.clear();
  for (unsigned i = 0, e = VLIWScheduler->SUnits.size(); i != e; ++i) {
    SUnit *SU = &(VLIWScheduler)->SUnits[i];
    MIToSUnit[SU->getInstr()] = SU;
  }

  // The main packetizer loop.
  for (; BeginItr != EndItr; ++BeginItr) {
    MachineInstr *MI = BeginItr;
    //DEBUG(dbgs() << "\nMI Opcode = " << MI->getOpcode());

    this->initPacketizerState();

    // End the current packet if needed.
    if (this->isSoloInstruction(MI)) {
      endPacket(MBB, MI);
      continue;
    }

    // Ignore pseudo instructions.
    if (this->ignorePseudoInstruction(MI, MBB))
      continue;

    SUnit *SUI = MIToSUnit[MI];
    DEBUG(dbgs() << "\nMI Opcode = " << MI->getOpcode());
    const llvm::MCInstrDesc &MID = MI->getDesc();
    DEBUG(dbgs() << "\nNumOperands for " << MI->getOpcode() <<
          " = " << MID.getNumOperands());
    assert(SUI && "Missing SUnit Info!");

    // First check that they are any issue slots left
    if(CurrentPacketMIs.size() < 
       //this->ResourceTracker->getInstrItins()->Props.IssueWidth) {
       ResourceTracker->getInstrItins()->Props.IssueWidth) {
      // Ask DFA if machine resource is available for MI.
      bool ResourceAvail = ResourceTracker->canReserveResources(MI);
      //if(!ResourceAvail)
      //DEBUG(dbgs() << "\nResources not available for " << MI->getOpcode());
      if (ResourceAvail) {
        //DEBUG(dbgs() << "\nResources available for " << MI->getOpcode());
        // Dependency check for MI with instructions in CurrentPacketMIs.
        for (std::vector<MachineInstr*>::iterator VI = CurrentPacketMIs.begin(),
            VE = CurrentPacketMIs.end(); VI != VE; ++VI) {
          MachineInstr *MJ = *VI;
          SUnit *SUJ = MIToSUnit[MJ];
          assert(SUJ && "Missing SUnit Info!");

          // Is it legal to packetize SUI and SUJ together.
          if (!this->isLegalToPacketizeTogether(SUI, SUJ)) {
            // Allow packetization if dependency can be pruned.
            if (!this->isLegalToPruneDependencies(SUI, SUJ)) {
              // End the packet if dependency cannot be pruned.
              endPacket(MBB, MI);
              break;
            } // !isLegalToPruneDependencies.
          } // !isLegalToPacketizeTogether.
        } // For all instructions in CurrentPacketMIs.
      }
      else {
        // End the packet if resource is not available.
        endPacket(MBB, MI);
      }
    } else {
     // > IssueWidth
     endPacket(MBB, MI);
    }

    // Add MI to the current packet.
    BeginItr = this->addToPacket(MI);
  } // For all instructions in BB.

  // End any packet left behind.
  endPacket(MBB, EndItr);
  VLIWScheduler->exitRegion();
  VLIWScheduler->finishBlock();
}*/

bool LE1PacketizerList::
ignorePseudoInstruction(MachineInstr *I, MachineBasicBlock *MBB) {
  //if(I->isPseudo()) {
    //DEBUG(dbgs() << "\nisPseudo " << I->getOpcode());
    //return true;
  //}
  if(I->isDebugValue()) {
    //DEBUG(dbgs() << "\nisDebugValue " << I->getOpcode());
    return true;
  }
  //if(I->isLabel()) {
    //DEBUG(dbgs() << "\nisLabel " << I->getOpcode());
    //return true;
  //}

  const MCInstrDesc& TID = I->getDesc();
  unsigned SchedClass = TID.getSchedClass();
  const InstrStage* IS =
                    ResourceTracker->getInstrItins()->beginStage(SchedClass);
  unsigned FuncUnits = IS->getUnits();
  //if(!FuncUnits)
    //DEBUG(dbgs() << "\nhas no func units " << I->getOpcode());
  return !FuncUnits;
}

bool LE1PacketizerList::
isSoloInstruction(MachineInstr *MI) {
  /*if(MI->getOpcode() == LE1::SUBi)
    if(MI->getOperand(1).getReg() == LE1::SP) {
      DEBUG(dbgs() << "\nAdjusting stack pointer so solo");
      return true;
    }
  if(MI->getOpcode() == LE1::STW)
   if(MI->getOperand(0).isReg())
     if(MI->getOperand(0).getReg() == LE1::L0) {
       DEBUG(dbgs() << "\nLink register being stored so solo");
       return true;
      }
  if(MI->getOpcode() == LE1::STW)
    return true;*/
  if(MI->isEHLabel()) {
    //DEBUG(dbgs() << "\nMI is a EHLabel, so solo"); 
    return true;
  }

  return false;
}

// SUJ is the instruction currently in the packet, SUI is
// the next instruction to be packetized. SUnits are nodes
// of ScheduleDAG.
bool LE1PacketizerList::
isLegalToPacketizeTogether(SUnit *SUI, SUnit *SUJ) {
  //DEBUG(dbgs() << "\nisLegalToPacketize?");
  MachineInstr *I = SUI->getInstr();
  MachineInstr *J = SUJ->getInstr();
  assert(I && J && "Unable to packetize null instructions");

  const MCInstrDesc &MCIDI = I->getDesc();
  const MCInstrDesc &MCIDJ = J->getDesc();

  const LE1RegisterInfo *RI = (const LE1RegisterInfo*) TM.getRegisterInfo();
  const LE1InstrInfo *II = (const LE1InstrInfo*) TII;

  // Labels are not bundled
  if(I->isLabel())
    return false;

  // Effectively endPacket once a call has been inserted
  if(J->getOpcode() == LE1::CALL ||
     J->getOpcode() == LE1::LNKCALL)
    return false;

  // Callee-save register function cannot be packatized with ops
  // that modify those regs
  /*
  if(doesCallModifySavedRegs(I, RI) &&
     doesModifyCalleeSavedRegs(J, RI) ||
     (doesCallModifySavedRegs(J, RI) &&
      doesModifyCalleeSavedRegs(I, RI))) {
    Dependence = true;
    DEBUG(dbgs() << "\nDependence = true, CalleeSavedRegs modified");
    return false;
  }*/


  // Only allowed one control-flow instruction. There's only one functional
  // unit to handle control-flow so this shouldn't be ever be true
  if(isControlFlow(I) && isControlFlow(J)) {
    Dependence = true;
    DEBUG(dbgs() << "\nDependence = true, already a control-flow instr in packet");
    return false;
  }

  // Check for dependences: SDep::Kind Data, Anti, Output and Order
  if (SUJ->isSucc(SUI)) {
    for(unsigned i=0;
        i < SUJ->Succs.size() && !FoundSequentialDependence; ++i) {

      if(SUJ->Succs[i].getSUnit() != SUI)
        continue;

      const TargetRegisterClass* RC = NULL;
      SDep::Kind DepType = SUJ->Succs[i].getKind();

      // Data (true dependences) are not allowed
      if(DepType == SDep::Data) {
        // Check if the immediates are used, then the dependence can be removed
        // TODO make this more general to handle other instances
        /*if(J->getOpcode() == LE1::SUBi) {
          if(I->getOpcode() == LE1::STW) {
            if(J->getOperand(0).getReg() == LE1::SP) {
              int64_t stackDecrement = J->getOperand(2).getImm();
              int64_t offset = I->getOperand(2).getImm();
              I->getOperand(2).setImm(offset-stackDecrement);
            }
          }
        }
        else {*/
          Dependence = true;
          DEBUG(dbgs() << "\nDependence is true. " << I->getOpcode() << " and " <<
                J->getOpcode() << " have data dependences");
          return false;
        }
      //}

      // Ignore the order of unconditional jumps/calls and non control-flow
      // instructions
      else if(isDirectJump(I) &&
              !MCIDJ.isBranch() &&
              !MCIDJ.isCall() &&
              (DepType == SDep::Order)) {
         DEBUG(dbgs() << "\nOrder dependence between " << I->getOpcode() << " and "
              << J->getOpcode());
     }

      else if(DepType == SDep::Order)
        DEBUG(dbgs() << "\nOrder dependence between " << I->getOpcode() << " and "
              << J->getOpcode());

      // Anti (WAR) can be ignored since operations within a
      // bundle are treated as atomic.
      else if(DepType == SDep::Anti) {
        DEBUG(dbgs() << "\nAnti-dependence between " << I->getOpcode() << " and "
              << J->getOpcode());
      }

      // Output (WAW) select register allocator to rename..?
      else if(DepType == SDep::Output)
        DEBUG(dbgs() << "\nOutput dependence between " << I->getOpcode() << " and "
              << J->getOpcode());
    }
  }

  return true;
}

// Public Constructor Function
FunctionPass *llvm::createLE1Packetizer(LE1TargetMachine &TM) {
  return new LE1Packetizer();
}
