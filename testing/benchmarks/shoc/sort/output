

OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 1 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 3702658
Simulation finished, cycleCount = 3702659
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 3702659
RUN TOP_SCAN
Device: 1 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 1479742
Simulation finished, cycleCount = 1479743
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1479743
RUN BOTTOM_SCAN
Device: 1 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 11537538
Simulation finished, cycleCount = 11537539
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 11537539
RUN REDUCE
Device: 1 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 3702666
Simulation finished, cycleCount = 3702667
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 7405326
RUN TOP_SCAN
Device: 1 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 1479742
Simulation finished, cycleCount = 1479743
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2959486
RUN BOTTOM_SCAN
Device: 1 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 11537546
Simulation finished, cycleCount = 11537547
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 23075086
RUN REDUCE
Device: 1 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 3702666
Simulation finished, cycleCount = 3702667
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 11107993
RUN TOP_SCAN
Device: 1 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 1479742
Simulation finished, cycleCount = 1479743
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4439229
RUN BOTTOM_SCAN
Device: 1 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 11537546
Simulation finished, cycleCount = 11537547
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 34612633
RUN REDUCE
Device: 1 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 3702666
Simulation finished, cycleCount = 3702667
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 14810660
RUN TOP_SCAN
Device: 1 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 1479742
Simulation finished, cycleCount = 1479743
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 5918972
RUN BOTTOM_SCAN
Device: 1 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 11537546
Simulation finished, cycleCount = 11537547
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 46150180
RUN REDUCE
Device: 1 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 3702666
Simulation finished, cycleCount = 3702667
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 18513327
RUN TOP_SCAN
Device: 1 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 1479742
Simulation finished, cycleCount = 1479743
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7398715
RUN BOTTOM_SCAN
Device: 1 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 11537546
Simulation finished, cycleCount = 11537547
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 57687727
RUN REDUCE
Device: 1 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 3702666
Simulation finished, cycleCount = 3702667
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 22215994
RUN TOP_SCAN
Device: 1 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 1479742
Simulation finished, cycleCount = 1479743
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 8878458
RUN BOTTOM_SCAN
Device: 1 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 11537546
Simulation finished, cycleCount = 11537547
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 69225274
RUN REDUCE
Device: 1 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 3702666
Simulation finished, cycleCount = 3702667
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 25918661
RUN TOP_SCAN
Device: 1 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 1479742
Simulation finished, cycleCount = 1479743
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 10358201
RUN BOTTOM_SCAN
Device: 1 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 11537546
Simulation finished, cycleCount = 11537547
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 80762821
RUN REDUCE
Device: 1 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 3702666
Simulation finished, cycleCount = 3702667
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 29621328
RUN TOP_SCAN
Device: 1 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 1479742
Simulation finished, cycleCount = 1479743
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 11837944
RUN BOTTOM_SCAN
Device: 1 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_1wide.xml
HALT operation received from [0][0][0] at cycle 11537546
Simulation finished, cycleCount = 11537547
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 92300368
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 2 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1851347
HALT operation received from [0][1][0] at cycle 1851347
Simulation finished, cycleCount = 1851348
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1851348
RUN TOP_SCAN
Device: 2 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1479750
RUN BOTTOM_SCAN
Device: 2 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 5768787
HALT operation received from [0][1][0] at cycle 5768787
Simulation finished, cycleCount = 5768788
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 5768788
RUN REDUCE
Device: 2 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1851351
HALT operation received from [0][1][0] at cycle 1851351
Simulation finished, cycleCount = 1851352
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 3702700
RUN TOP_SCAN
Device: 2 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2959500
RUN BOTTOM_SCAN
Device: 2 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 5768791
HALT operation received from [0][1][0] at cycle 5768791
Simulation finished, cycleCount = 5768792
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 11537580
RUN REDUCE
Device: 2 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1851351
HALT operation received from [0][1][0] at cycle 1851351
Simulation finished, cycleCount = 1851352
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 5554052
RUN TOP_SCAN
Device: 2 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4439250
RUN BOTTOM_SCAN
Device: 2 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 5768791
HALT operation received from [0][1][0] at cycle 5768791
Simulation finished, cycleCount = 5768792
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 17306372
RUN REDUCE
Device: 2 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1851351
HALT operation received from [0][1][0] at cycle 1851351
Simulation finished, cycleCount = 1851352
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 7405404
RUN TOP_SCAN
Device: 2 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 5919000
RUN BOTTOM_SCAN
Device: 2 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 5768791
HALT operation received from [0][1][0] at cycle 5768791
Simulation finished, cycleCount = 5768792
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 23075164
RUN REDUCE
Device: 2 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1851351
HALT operation received from [0][1][0] at cycle 1851351
Simulation finished, cycleCount = 1851352
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 9256756
RUN TOP_SCAN
Device: 2 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7398750
RUN BOTTOM_SCAN
Device: 2 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 5768791
HALT operation received from [0][1][0] at cycle 5768791
Simulation finished, cycleCount = 5768792
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 28843956
RUN REDUCE
Device: 2 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1851351
HALT operation received from [0][1][0] at cycle 1851351
Simulation finished, cycleCount = 1851352
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 11108108
RUN TOP_SCAN
Device: 2 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 8878500
RUN BOTTOM_SCAN
Device: 2 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 5768791
HALT operation received from [0][1][0] at cycle 5768791
Simulation finished, cycleCount = 5768792
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 34612748
RUN REDUCE
Device: 2 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1851351
HALT operation received from [0][1][0] at cycle 1851351
Simulation finished, cycleCount = 1851352
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 12959460
RUN TOP_SCAN
Device: 2 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 10358250
RUN BOTTOM_SCAN
Device: 2 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 5768791
HALT operation received from [0][1][0] at cycle 5768791
Simulation finished, cycleCount = 5768792
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 40381540
RUN REDUCE
Device: 2 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1851351
HALT operation received from [0][1][0] at cycle 1851351
Simulation finished, cycleCount = 1851352
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 14810812
RUN TOP_SCAN
Device: 2 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 11838000
RUN BOTTOM_SCAN
Device: 2 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_1wide.xml
HALT operation received from [0][0][0] at cycle 5768791
HALT operation received from [0][1][0] at cycle 5768791
Simulation finished, cycleCount = 5768792
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 46150332
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 4 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 925687
HALT operation received from [0][1][0] at cycle 925687
HALT operation received from [0][2][0] at cycle 925687
HALT operation received from [0][3][0] at cycle 925687
Simulation finished, cycleCount = 925688
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 925688
RUN TOP_SCAN
Device: 4 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1479750
RUN BOTTOM_SCAN
Device: 4 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 2884407
HALT operation received from [0][1][0] at cycle 2884407
HALT operation received from [0][2][0] at cycle 2884407
HALT operation received from [0][3][0] at cycle 2884407
Simulation finished, cycleCount = 2884408
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 2884408
RUN REDUCE
Device: 4 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 925689
HALT operation received from [0][1][0] at cycle 925689
HALT operation received from [0][2][0] at cycle 925689
HALT operation received from [0][3][0] at cycle 925689
Simulation finished, cycleCount = 925690
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1851378
RUN TOP_SCAN
Device: 4 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2959500
RUN BOTTOM_SCAN
Device: 4 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 2884409
HALT operation received from [0][1][0] at cycle 2884409
HALT operation received from [0][2][0] at cycle 2884409
HALT operation received from [0][3][0] at cycle 2884409
Simulation finished, cycleCount = 2884410
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 5768818
RUN REDUCE
Device: 4 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 925689
HALT operation received from [0][1][0] at cycle 925689
HALT operation received from [0][2][0] at cycle 925689
HALT operation received from [0][3][0] at cycle 925689
Simulation finished, cycleCount = 925690
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2777068
RUN TOP_SCAN
Device: 4 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4439250
RUN BOTTOM_SCAN
Device: 4 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 2884409
HALT operation received from [0][1][0] at cycle 2884409
HALT operation received from [0][2][0] at cycle 2884409
HALT operation received from [0][3][0] at cycle 2884409
Simulation finished, cycleCount = 2884410
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 8653228
RUN REDUCE
Device: 4 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 925689
HALT operation received from [0][1][0] at cycle 925689
HALT operation received from [0][2][0] at cycle 925689
HALT operation received from [0][3][0] at cycle 925689
Simulation finished, cycleCount = 925690
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3702758
RUN TOP_SCAN
Device: 4 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 5919000
RUN BOTTOM_SCAN
Device: 4 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 2884409
HALT operation received from [0][1][0] at cycle 2884409
HALT operation received from [0][2][0] at cycle 2884409
HALT operation received from [0][3][0] at cycle 2884409
Simulation finished, cycleCount = 2884410
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 11537638
RUN REDUCE
Device: 4 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 925689
HALT operation received from [0][1][0] at cycle 925689
HALT operation received from [0][2][0] at cycle 925689
HALT operation received from [0][3][0] at cycle 925689
Simulation finished, cycleCount = 925690
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 4628448
RUN TOP_SCAN
Device: 4 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7398750
RUN BOTTOM_SCAN
Device: 4 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 2884409
HALT operation received from [0][1][0] at cycle 2884409
HALT operation received from [0][2][0] at cycle 2884409
HALT operation received from [0][3][0] at cycle 2884409
Simulation finished, cycleCount = 2884410
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 14422048
RUN REDUCE
Device: 4 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 925689
HALT operation received from [0][1][0] at cycle 925689
HALT operation received from [0][2][0] at cycle 925689
HALT operation received from [0][3][0] at cycle 925689
Simulation finished, cycleCount = 925690
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 5554138
RUN TOP_SCAN
Device: 4 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 8878500
RUN BOTTOM_SCAN
Device: 4 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 2884409
HALT operation received from [0][1][0] at cycle 2884409
HALT operation received from [0][2][0] at cycle 2884409
HALT operation received from [0][3][0] at cycle 2884409
Simulation finished, cycleCount = 2884410
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 17306458
RUN REDUCE
Device: 4 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 925689
HALT operation received from [0][1][0] at cycle 925689
HALT operation received from [0][2][0] at cycle 925689
HALT operation received from [0][3][0] at cycle 925689
Simulation finished, cycleCount = 925690
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 6479828
RUN TOP_SCAN
Device: 4 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 10358250
RUN BOTTOM_SCAN
Device: 4 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 2884409
HALT operation received from [0][1][0] at cycle 2884409
HALT operation received from [0][2][0] at cycle 2884409
HALT operation received from [0][3][0] at cycle 2884409
Simulation finished, cycleCount = 2884410
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 20190868
RUN REDUCE
Device: 4 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 925689
HALT operation received from [0][1][0] at cycle 925689
HALT operation received from [0][2][0] at cycle 925689
HALT operation received from [0][3][0] at cycle 925689
Simulation finished, cycleCount = 925690
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 7405518
RUN TOP_SCAN
Device: 4 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 11838000
RUN BOTTOM_SCAN
Device: 4 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_1wide.xml
HALT operation received from [0][0][0] at cycle 2884409
HALT operation received from [0][1][0] at cycle 2884409
HALT operation received from [0][2][0] at cycle 2884409
HALT operation received from [0][3][0] at cycle 2884409
Simulation finished, cycleCount = 2884410
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 23075278
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 8 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 462861
HALT operation received from [0][1][0] at cycle 462861
HALT operation received from [0][2][0] at cycle 462861
HALT operation received from [0][3][0] at cycle 462861
HALT operation received from [0][4][0] at cycle 462861
HALT operation received from [0][5][0] at cycle 462861
HALT operation received from [0][6][0] at cycle 462861
HALT operation received from [0][7][0] at cycle 462861
Simulation finished, cycleCount = 462862
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 462862
RUN TOP_SCAN
Device: 8 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1479750
RUN BOTTOM_SCAN
Device: 8 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1442221
HALT operation received from [0][1][0] at cycle 1442221
HALT operation received from [0][2][0] at cycle 1442221
HALT operation received from [0][3][0] at cycle 1442221
HALT operation received from [0][4][0] at cycle 1442221
HALT operation received from [0][5][0] at cycle 1442221
HALT operation received from [0][6][0] at cycle 1442221
HALT operation received from [0][7][0] at cycle 1442221
Simulation finished, cycleCount = 1442222
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1442222
RUN REDUCE
Device: 8 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 462862
HALT operation received from [0][1][0] at cycle 462862
HALT operation received from [0][2][0] at cycle 462862
HALT operation received from [0][3][0] at cycle 462862
HALT operation received from [0][4][0] at cycle 462862
HALT operation received from [0][5][0] at cycle 462862
HALT operation received from [0][6][0] at cycle 462862
HALT operation received from [0][7][0] at cycle 462862
Simulation finished, cycleCount = 462863
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 925725
RUN TOP_SCAN
Device: 8 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2959500
RUN BOTTOM_SCAN
Device: 8 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1442222
HALT operation received from [0][1][0] at cycle 1442222
HALT operation received from [0][2][0] at cycle 1442222
HALT operation received from [0][3][0] at cycle 1442222
HALT operation received from [0][4][0] at cycle 1442222
HALT operation received from [0][5][0] at cycle 1442222
HALT operation received from [0][6][0] at cycle 1442222
HALT operation received from [0][7][0] at cycle 1442222
Simulation finished, cycleCount = 1442223
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2884445
RUN REDUCE
Device: 8 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 462862
HALT operation received from [0][1][0] at cycle 462862
HALT operation received from [0][2][0] at cycle 462862
HALT operation received from [0][3][0] at cycle 462862
HALT operation received from [0][4][0] at cycle 462862
HALT operation received from [0][5][0] at cycle 462862
HALT operation received from [0][6][0] at cycle 462862
HALT operation received from [0][7][0] at cycle 462862
Simulation finished, cycleCount = 462863
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 1388588
RUN TOP_SCAN
Device: 8 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4439250
RUN BOTTOM_SCAN
Device: 8 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1442222
HALT operation received from [0][1][0] at cycle 1442222
HALT operation received from [0][2][0] at cycle 1442222
HALT operation received from [0][3][0] at cycle 1442222
HALT operation received from [0][4][0] at cycle 1442222
HALT operation received from [0][5][0] at cycle 1442222
HALT operation received from [0][6][0] at cycle 1442222
HALT operation received from [0][7][0] at cycle 1442222
Simulation finished, cycleCount = 1442223
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4326668
RUN REDUCE
Device: 8 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 462862
HALT operation received from [0][1][0] at cycle 462862
HALT operation received from [0][2][0] at cycle 462862
HALT operation received from [0][3][0] at cycle 462862
HALT operation received from [0][4][0] at cycle 462862
HALT operation received from [0][5][0] at cycle 462862
HALT operation received from [0][6][0] at cycle 462862
HALT operation received from [0][7][0] at cycle 462862
Simulation finished, cycleCount = 462863
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 1851451
RUN TOP_SCAN
Device: 8 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 5919000
RUN BOTTOM_SCAN
Device: 8 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1442222
HALT operation received from [0][1][0] at cycle 1442222
HALT operation received from [0][2][0] at cycle 1442222
HALT operation received from [0][3][0] at cycle 1442222
HALT operation received from [0][4][0] at cycle 1442222
HALT operation received from [0][5][0] at cycle 1442222
HALT operation received from [0][6][0] at cycle 1442222
HALT operation received from [0][7][0] at cycle 1442222
Simulation finished, cycleCount = 1442223
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 5768891
RUN REDUCE
Device: 8 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 462862
HALT operation received from [0][1][0] at cycle 462862
HALT operation received from [0][2][0] at cycle 462862
HALT operation received from [0][3][0] at cycle 462862
HALT operation received from [0][4][0] at cycle 462862
HALT operation received from [0][5][0] at cycle 462862
HALT operation received from [0][6][0] at cycle 462862
HALT operation received from [0][7][0] at cycle 462862
Simulation finished, cycleCount = 462863
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 2314314
RUN TOP_SCAN
Device: 8 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7398750
RUN BOTTOM_SCAN
Device: 8 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1442222
HALT operation received from [0][1][0] at cycle 1442222
HALT operation received from [0][2][0] at cycle 1442222
HALT operation received from [0][3][0] at cycle 1442222
HALT operation received from [0][4][0] at cycle 1442222
HALT operation received from [0][5][0] at cycle 1442222
HALT operation received from [0][6][0] at cycle 1442222
HALT operation received from [0][7][0] at cycle 1442222
Simulation finished, cycleCount = 1442223
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7211114
RUN REDUCE
Device: 8 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 462862
HALT operation received from [0][1][0] at cycle 462862
HALT operation received from [0][2][0] at cycle 462862
HALT operation received from [0][3][0] at cycle 462862
HALT operation received from [0][4][0] at cycle 462862
HALT operation received from [0][5][0] at cycle 462862
HALT operation received from [0][6][0] at cycle 462862
HALT operation received from [0][7][0] at cycle 462862
Simulation finished, cycleCount = 462863
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 2777177
RUN TOP_SCAN
Device: 8 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 8878500
RUN BOTTOM_SCAN
Device: 8 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1442222
HALT operation received from [0][1][0] at cycle 1442222
HALT operation received from [0][2][0] at cycle 1442222
HALT operation received from [0][3][0] at cycle 1442222
HALT operation received from [0][4][0] at cycle 1442222
HALT operation received from [0][5][0] at cycle 1442222
HALT operation received from [0][6][0] at cycle 1442222
HALT operation received from [0][7][0] at cycle 1442222
Simulation finished, cycleCount = 1442223
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 8653337
RUN REDUCE
Device: 8 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 462862
HALT operation received from [0][1][0] at cycle 462862
HALT operation received from [0][2][0] at cycle 462862
HALT operation received from [0][3][0] at cycle 462862
HALT operation received from [0][4][0] at cycle 462862
HALT operation received from [0][5][0] at cycle 462862
HALT operation received from [0][6][0] at cycle 462862
HALT operation received from [0][7][0] at cycle 462862
Simulation finished, cycleCount = 462863
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 3240040
RUN TOP_SCAN
Device: 8 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 10358250
RUN BOTTOM_SCAN
Device: 8 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1442222
HALT operation received from [0][1][0] at cycle 1442222
HALT operation received from [0][2][0] at cycle 1442222
HALT operation received from [0][3][0] at cycle 1442222
HALT operation received from [0][4][0] at cycle 1442222
HALT operation received from [0][5][0] at cycle 1442222
HALT operation received from [0][6][0] at cycle 1442222
HALT operation received from [0][7][0] at cycle 1442222
Simulation finished, cycleCount = 1442223
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 10095560
RUN REDUCE
Device: 8 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 462862
HALT operation received from [0][1][0] at cycle 462862
HALT operation received from [0][2][0] at cycle 462862
HALT operation received from [0][3][0] at cycle 462862
HALT operation received from [0][4][0] at cycle 462862
HALT operation received from [0][5][0] at cycle 462862
HALT operation received from [0][6][0] at cycle 462862
HALT operation received from [0][7][0] at cycle 462862
Simulation finished, cycleCount = 462863
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 3702903
RUN TOP_SCAN
Device: 8 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 11838000
RUN BOTTOM_SCAN
Device: 8 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_1wide.xml
HALT operation received from [0][0][0] at cycle 1442222
HALT operation received from [0][1][0] at cycle 1442222
HALT operation received from [0][2][0] at cycle 1442222
HALT operation received from [0][3][0] at cycle 1442222
HALT operation received from [0][4][0] at cycle 1442222
HALT operation received from [0][5][0] at cycle 1442222
HALT operation received from [0][6][0] at cycle 1442222
HALT operation received from [0][7][0] at cycle 1442222
Simulation finished, cycleCount = 1442223
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 11537783
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 16 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 462857
HALT operation received from [0][1][0] at cycle 462857
HALT operation received from [0][2][0] at cycle 462857
HALT operation received from [0][3][0] at cycle 462857
HALT operation received from [0][4][0] at cycle 462857
HALT operation received from [0][5][0] at cycle 462857
HALT operation received from [0][6][0] at cycle 462857
HALT operation received from [0][7][0] at cycle 462857
Simulation finished, cycleCount = 462858
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 462858
RUN TOP_SCAN
Device: 16 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1479750
RUN BOTTOM_SCAN
Device: 16 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1442217
HALT operation received from [0][1][0] at cycle 1442217
HALT operation received from [0][2][0] at cycle 1442217
HALT operation received from [0][3][0] at cycle 1442217
HALT operation received from [0][4][0] at cycle 1442217
HALT operation received from [0][5][0] at cycle 1442217
HALT operation received from [0][6][0] at cycle 1442217
HALT operation received from [0][7][0] at cycle 1442217
Simulation finished, cycleCount = 1442218
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1442218
RUN REDUCE
Device: 16 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 462858
HALT operation received from [0][1][0] at cycle 462858
HALT operation received from [0][2][0] at cycle 462858
HALT operation received from [0][3][0] at cycle 462858
HALT operation received from [0][4][0] at cycle 462858
HALT operation received from [0][5][0] at cycle 462858
HALT operation received from [0][6][0] at cycle 462858
HALT operation received from [0][7][0] at cycle 462858
Simulation finished, cycleCount = 462859
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 925717
RUN TOP_SCAN
Device: 16 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2959500
RUN BOTTOM_SCAN
Device: 16 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1442218
HALT operation received from [0][1][0] at cycle 1442218
HALT operation received from [0][2][0] at cycle 1442218
HALT operation received from [0][3][0] at cycle 1442218
HALT operation received from [0][4][0] at cycle 1442218
HALT operation received from [0][5][0] at cycle 1442218
HALT operation received from [0][6][0] at cycle 1442218
HALT operation received from [0][7][0] at cycle 1442218
Simulation finished, cycleCount = 1442219
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2884437
RUN REDUCE
Device: 16 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 462858
HALT operation received from [0][1][0] at cycle 462858
HALT operation received from [0][2][0] at cycle 462858
HALT operation received from [0][3][0] at cycle 462858
HALT operation received from [0][4][0] at cycle 462858
HALT operation received from [0][5][0] at cycle 462858
HALT operation received from [0][6][0] at cycle 462858
HALT operation received from [0][7][0] at cycle 462858
Simulation finished, cycleCount = 462859
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 1388576
RUN TOP_SCAN
Device: 16 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4439250
RUN BOTTOM_SCAN
Device: 16 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1442218
HALT operation received from [0][1][0] at cycle 1442218
HALT operation received from [0][2][0] at cycle 1442218
HALT operation received from [0][3][0] at cycle 1442218
HALT operation received from [0][4][0] at cycle 1442218
HALT operation received from [0][5][0] at cycle 1442218
HALT operation received from [0][6][0] at cycle 1442218
HALT operation received from [0][7][0] at cycle 1442218
Simulation finished, cycleCount = 1442219
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4326656
RUN REDUCE
Device: 16 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 462858
HALT operation received from [0][1][0] at cycle 462858
HALT operation received from [0][2][0] at cycle 462858
HALT operation received from [0][3][0] at cycle 462858
HALT operation received from [0][4][0] at cycle 462858
HALT operation received from [0][5][0] at cycle 462858
HALT operation received from [0][6][0] at cycle 462858
HALT operation received from [0][7][0] at cycle 462858
Simulation finished, cycleCount = 462859
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 1851435
RUN TOP_SCAN
Device: 16 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 5919000
RUN BOTTOM_SCAN
Device: 16 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1442218
HALT operation received from [0][1][0] at cycle 1442218
HALT operation received from [0][2][0] at cycle 1442218
HALT operation received from [0][3][0] at cycle 1442218
HALT operation received from [0][4][0] at cycle 1442218
HALT operation received from [0][5][0] at cycle 1442218
HALT operation received from [0][6][0] at cycle 1442218
HALT operation received from [0][7][0] at cycle 1442218
Simulation finished, cycleCount = 1442219
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 5768875
RUN REDUCE
Device: 16 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 462858
HALT operation received from [0][1][0] at cycle 462858
HALT operation received from [0][2][0] at cycle 462858
HALT operation received from [0][3][0] at cycle 462858
HALT operation received from [0][4][0] at cycle 462858
HALT operation received from [0][5][0] at cycle 462858
HALT operation received from [0][6][0] at cycle 462858
HALT operation received from [0][7][0] at cycle 462858
Simulation finished, cycleCount = 462859
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 2314294
RUN TOP_SCAN
Device: 16 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7398750
RUN BOTTOM_SCAN
Device: 16 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1442218
HALT operation received from [0][1][0] at cycle 1442218
HALT operation received from [0][2][0] at cycle 1442218
HALT operation received from [0][3][0] at cycle 1442218
HALT operation received from [0][4][0] at cycle 1442218
HALT operation received from [0][5][0] at cycle 1442218
HALT operation received from [0][6][0] at cycle 1442218
HALT operation received from [0][7][0] at cycle 1442218
Simulation finished, cycleCount = 1442219
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7211094
RUN REDUCE
Device: 16 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 462858
HALT operation received from [0][1][0] at cycle 462858
HALT operation received from [0][2][0] at cycle 462858
HALT operation received from [0][3][0] at cycle 462858
HALT operation received from [0][4][0] at cycle 462858
HALT operation received from [0][5][0] at cycle 462858
HALT operation received from [0][6][0] at cycle 462858
HALT operation received from [0][7][0] at cycle 462858
Simulation finished, cycleCount = 462859
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 2777153
RUN TOP_SCAN
Device: 16 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 8878500
RUN BOTTOM_SCAN
Device: 16 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1442218
HALT operation received from [0][1][0] at cycle 1442218
HALT operation received from [0][2][0] at cycle 1442218
HALT operation received from [0][3][0] at cycle 1442218
HALT operation received from [0][4][0] at cycle 1442218
HALT operation received from [0][5][0] at cycle 1442218
HALT operation received from [0][6][0] at cycle 1442218
HALT operation received from [0][7][0] at cycle 1442218
Simulation finished, cycleCount = 1442219
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 8653313
RUN REDUCE
Device: 16 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 462858
HALT operation received from [0][1][0] at cycle 462858
HALT operation received from [0][2][0] at cycle 462858
HALT operation received from [0][3][0] at cycle 462858
HALT operation received from [0][4][0] at cycle 462858
HALT operation received from [0][5][0] at cycle 462858
HALT operation received from [0][6][0] at cycle 462858
HALT operation received from [0][7][0] at cycle 462858
Simulation finished, cycleCount = 462859
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 3240012
RUN TOP_SCAN
Device: 16 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 10358250
RUN BOTTOM_SCAN
Device: 16 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1442218
HALT operation received from [0][1][0] at cycle 1442218
HALT operation received from [0][2][0] at cycle 1442218
HALT operation received from [0][3][0] at cycle 1442218
HALT operation received from [0][4][0] at cycle 1442218
HALT operation received from [0][5][0] at cycle 1442218
HALT operation received from [0][6][0] at cycle 1442218
HALT operation received from [0][7][0] at cycle 1442218
Simulation finished, cycleCount = 1442219
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 10095532
RUN REDUCE
Device: 16 core scalar
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 462858
HALT operation received from [0][1][0] at cycle 462858
HALT operation received from [0][2][0] at cycle 462858
HALT operation received from [0][3][0] at cycle 462858
HALT operation received from [0][4][0] at cycle 462858
HALT operation received from [0][5][0] at cycle 462858
HALT operation received from [0][6][0] at cycle 462858
HALT operation received from [0][7][0] at cycle 462858
Simulation finished, cycleCount = 462859
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 3702871
RUN TOP_SCAN
Device: 16 core scalar
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][1][0] at cycle 17
HALT operation received from [0][2][0] at cycle 17
HALT operation received from [0][3][0] at cycle 17
HALT operation received from [0][4][0] at cycle 17
HALT operation received from [0][5][0] at cycle 17
HALT operation received from [0][6][0] at cycle 17
HALT operation received from [0][7][0] at cycle 17
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1479749
Simulation finished, cycleCount = 1479750
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 11838000
RUN BOTTOM_SCAN
Device: 16 core scalar
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_1wide.xml
HALT operation received from [0][8][0] at cycle 17
HALT operation received from [0][9][0] at cycle 17
HALT operation received from [0][10][0] at cycle 17
HALT operation received from [0][11][0] at cycle 17
HALT operation received from [0][12][0] at cycle 17
HALT operation received from [0][13][0] at cycle 17
HALT operation received from [0][14][0] at cycle 17
HALT operation received from [0][15][0] at cycle 17
HALT operation received from [0][0][0] at cycle 1442218
HALT operation received from [0][1][0] at cycle 1442218
HALT operation received from [0][2][0] at cycle 1442218
HALT operation received from [0][3][0] at cycle 1442218
HALT operation received from [0][4][0] at cycle 1442218
HALT operation received from [0][5][0] at cycle 1442218
HALT operation received from [0][6][0] at cycle 1442218
HALT operation received from [0][7][0] at cycle 1442218
Simulation finished, cycleCount = 1442219
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 11537751
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 1 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3523847
Simulation finished, cycleCount = 3523848
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 3523848
RUN TOP_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1262006
Simulation finished, cycleCount = 1262007
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1262007
RUN BOTTOM_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 9796135
Simulation finished, cycleCount = 9796136
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 9796136
RUN REDUCE
Device: 1 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3006487
Simulation finished, cycleCount = 3006488
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 6530336
RUN TOP_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1262006
Simulation finished, cycleCount = 1262007
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2524014
RUN BOTTOM_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8251607
Simulation finished, cycleCount = 8251608
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 18047744
RUN REDUCE
Device: 1 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3006487
Simulation finished, cycleCount = 3006488
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 9536824
RUN TOP_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1262006
Simulation finished, cycleCount = 1262007
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3786021
RUN BOTTOM_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8251607
Simulation finished, cycleCount = 8251608
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 26299352
RUN REDUCE
Device: 1 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3006487
Simulation finished, cycleCount = 3006488
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 12543312
RUN TOP_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1262006
Simulation finished, cycleCount = 1262007
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 5048028
RUN BOTTOM_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8251607
Simulation finished, cycleCount = 8251608
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 34550960
RUN REDUCE
Device: 1 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3006487
Simulation finished, cycleCount = 3006488
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 15549800
RUN TOP_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1262006
Simulation finished, cycleCount = 1262007
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 6310035
RUN BOTTOM_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8251607
Simulation finished, cycleCount = 8251608
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 42802568
RUN REDUCE
Device: 1 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3006487
Simulation finished, cycleCount = 3006488
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 18556288
RUN TOP_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1262006
Simulation finished, cycleCount = 1262007
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 7572042
RUN BOTTOM_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8251607
Simulation finished, cycleCount = 8251608
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 51054176
RUN REDUCE
Device: 1 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3006487
Simulation finished, cycleCount = 3006488
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 21562776
RUN TOP_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1262006
Simulation finished, cycleCount = 1262007
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 8834049
RUN BOTTOM_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8251607
Simulation finished, cycleCount = 8251608
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 59305784
RUN REDUCE
Device: 1 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3006487
Simulation finished, cycleCount = 3006488
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 24569264
RUN TOP_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1262006
Simulation finished, cycleCount = 1262007
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 10096056
RUN BOTTOM_SCAN
Device: 1 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_2wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8251607
Simulation finished, cycleCount = 8251608
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 67557392
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 2 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1503259
HALT operation received from [0][1][0] at cycle 1503259
Simulation finished, cycleCount = 1503260
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1503260
RUN TOP_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1064556
RUN BOTTOM_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 4125815
HALT operation received from [0][1][0] at cycle 4125815
Simulation finished, cycleCount = 4125816
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 4125816
RUN REDUCE
Device: 2 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1761939
HALT operation received from [0][1][0] at cycle 1761939
Simulation finished, cycleCount = 1761940
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 3265200
RUN TOP_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2129112
RUN BOTTOM_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 4898087
HALT operation received from [0][1][0] at cycle 4898087
Simulation finished, cycleCount = 4898088
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 9023904
RUN REDUCE
Device: 2 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1761939
HALT operation received from [0][1][0] at cycle 1761939
Simulation finished, cycleCount = 1761940
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 5027140
RUN TOP_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3193668
RUN BOTTOM_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 4898087
HALT operation received from [0][1][0] at cycle 4898087
Simulation finished, cycleCount = 4898088
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 13921992
RUN REDUCE
Device: 2 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1761939
HALT operation received from [0][1][0] at cycle 1761939
Simulation finished, cycleCount = 1761940
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 6789080
RUN TOP_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4258224
RUN BOTTOM_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 4898087
HALT operation received from [0][1][0] at cycle 4898087
Simulation finished, cycleCount = 4898088
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 18820080
RUN REDUCE
Device: 2 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1761939
HALT operation received from [0][1][0] at cycle 1761939
Simulation finished, cycleCount = 1761940
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 8551020
RUN TOP_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5322780
RUN BOTTOM_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 4898087
HALT operation received from [0][1][0] at cycle 4898087
Simulation finished, cycleCount = 4898088
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 23718168
RUN REDUCE
Device: 2 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1761939
HALT operation received from [0][1][0] at cycle 1761939
Simulation finished, cycleCount = 1761940
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 10312960
RUN TOP_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6387336
RUN BOTTOM_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 4898087
HALT operation received from [0][1][0] at cycle 4898087
Simulation finished, cycleCount = 4898088
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 28616256
RUN REDUCE
Device: 2 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1761939
HALT operation received from [0][1][0] at cycle 1761939
Simulation finished, cycleCount = 1761940
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 12074900
RUN TOP_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7451892
RUN BOTTOM_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 4898087
HALT operation received from [0][1][0] at cycle 4898087
Simulation finished, cycleCount = 4898088
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 33514344
RUN REDUCE
Device: 2 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1761939
HALT operation received from [0][1][0] at cycle 1761939
Simulation finished, cycleCount = 1761940
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 13836840
RUN TOP_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8516448
RUN BOTTOM_SCAN
Device: 2 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_2wide.xml
HALT operation received from [0][0][0] at cycle 4898087
HALT operation received from [0][1][0] at cycle 4898087
Simulation finished, cycleCount = 4898088
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 38412432
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 4 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 751641
HALT operation received from [0][1][0] at cycle 751641
HALT operation received from [0][2][0] at cycle 751641
HALT operation received from [0][3][0] at cycle 751641
Simulation finished, cycleCount = 751642
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 751642
RUN TOP_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1064556
RUN BOTTOM_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 2062919
HALT operation received from [0][1][0] at cycle 2062919
HALT operation received from [0][2][0] at cycle 2062919
HALT operation received from [0][3][0] at cycle 2062919
Simulation finished, cycleCount = 2062920
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 2062920
RUN REDUCE
Device: 4 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 880981
HALT operation received from [0][1][0] at cycle 880981
HALT operation received from [0][2][0] at cycle 880981
HALT operation received from [0][3][0] at cycle 880981
Simulation finished, cycleCount = 880982
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1632624
RUN TOP_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2129112
RUN BOTTOM_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 2449055
HALT operation received from [0][1][0] at cycle 2449055
HALT operation received from [0][2][0] at cycle 2449055
HALT operation received from [0][3][0] at cycle 2449055
Simulation finished, cycleCount = 2449056
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 4511976
RUN REDUCE
Device: 4 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 880981
HALT operation received from [0][1][0] at cycle 880981
HALT operation received from [0][2][0] at cycle 880981
HALT operation received from [0][3][0] at cycle 880981
Simulation finished, cycleCount = 880982
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2513606
RUN TOP_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3193668
RUN BOTTOM_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 2449055
HALT operation received from [0][1][0] at cycle 2449055
HALT operation received from [0][2][0] at cycle 2449055
HALT operation received from [0][3][0] at cycle 2449055
Simulation finished, cycleCount = 2449056
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 6961032
RUN REDUCE
Device: 4 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 880981
HALT operation received from [0][1][0] at cycle 880981
HALT operation received from [0][2][0] at cycle 880981
HALT operation received from [0][3][0] at cycle 880981
Simulation finished, cycleCount = 880982
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3394588
RUN TOP_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4258224
RUN BOTTOM_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 2449055
HALT operation received from [0][1][0] at cycle 2449055
HALT operation received from [0][2][0] at cycle 2449055
HALT operation received from [0][3][0] at cycle 2449055
Simulation finished, cycleCount = 2449056
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 9410088
RUN REDUCE
Device: 4 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 880981
HALT operation received from [0][1][0] at cycle 880981
HALT operation received from [0][2][0] at cycle 880981
HALT operation received from [0][3][0] at cycle 880981
Simulation finished, cycleCount = 880982
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 4275570
RUN TOP_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5322780
RUN BOTTOM_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 2449055
HALT operation received from [0][1][0] at cycle 2449055
HALT operation received from [0][2][0] at cycle 2449055
HALT operation received from [0][3][0] at cycle 2449055
Simulation finished, cycleCount = 2449056
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 11859144
RUN REDUCE
Device: 4 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 880981
HALT operation received from [0][1][0] at cycle 880981
HALT operation received from [0][2][0] at cycle 880981
HALT operation received from [0][3][0] at cycle 880981
Simulation finished, cycleCount = 880982
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 5156552
RUN TOP_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6387336
RUN BOTTOM_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 2449055
HALT operation received from [0][1][0] at cycle 2449055
HALT operation received from [0][2][0] at cycle 2449055
HALT operation received from [0][3][0] at cycle 2449055
Simulation finished, cycleCount = 2449056
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 14308200
RUN REDUCE
Device: 4 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 880981
HALT operation received from [0][1][0] at cycle 880981
HALT operation received from [0][2][0] at cycle 880981
HALT operation received from [0][3][0] at cycle 880981
Simulation finished, cycleCount = 880982
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 6037534
RUN TOP_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7451892
RUN BOTTOM_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 2449055
HALT operation received from [0][1][0] at cycle 2449055
HALT operation received from [0][2][0] at cycle 2449055
HALT operation received from [0][3][0] at cycle 2449055
Simulation finished, cycleCount = 2449056
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 16757256
RUN REDUCE
Device: 4 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 880981
HALT operation received from [0][1][0] at cycle 880981
HALT operation received from [0][2][0] at cycle 880981
HALT operation received from [0][3][0] at cycle 880981
Simulation finished, cycleCount = 880982
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 6918516
RUN TOP_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8516448
RUN BOTTOM_SCAN
Device: 4 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_2wide.xml
HALT operation received from [0][0][0] at cycle 2449055
HALT operation received from [0][1][0] at cycle 2449055
HALT operation received from [0][2][0] at cycle 2449055
HALT operation received from [0][3][0] at cycle 2449055
Simulation finished, cycleCount = 2449056
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 19206312
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 8 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 375836
HALT operation received from [0][1][0] at cycle 375836
HALT operation received from [0][2][0] at cycle 375836
HALT operation received from [0][3][0] at cycle 375836
HALT operation received from [0][4][0] at cycle 375836
HALT operation received from [0][5][0] at cycle 375836
HALT operation received from [0][6][0] at cycle 375836
HALT operation received from [0][7][0] at cycle 375836
Simulation finished, cycleCount = 375837
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 375837
RUN TOP_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1064556
RUN BOTTOM_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1031474
HALT operation received from [0][1][0] at cycle 1031474
HALT operation received from [0][2][0] at cycle 1031474
HALT operation received from [0][3][0] at cycle 1031474
HALT operation received from [0][4][0] at cycle 1031474
HALT operation received from [0][5][0] at cycle 1031474
HALT operation received from [0][6][0] at cycle 1031474
HALT operation received from [0][7][0] at cycle 1031474
Simulation finished, cycleCount = 1031475
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1031475
RUN REDUCE
Device: 8 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 440505
HALT operation received from [0][1][0] at cycle 440505
HALT operation received from [0][2][0] at cycle 440505
HALT operation received from [0][3][0] at cycle 440505
HALT operation received from [0][4][0] at cycle 440505
HALT operation received from [0][5][0] at cycle 440505
HALT operation received from [0][6][0] at cycle 440505
HALT operation received from [0][7][0] at cycle 440505
Simulation finished, cycleCount = 440506
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 816343
RUN TOP_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2129112
RUN BOTTOM_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2256015
RUN REDUCE
Device: 8 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 440505
HALT operation received from [0][1][0] at cycle 440505
HALT operation received from [0][2][0] at cycle 440505
HALT operation received from [0][3][0] at cycle 440505
HALT operation received from [0][4][0] at cycle 440505
HALT operation received from [0][5][0] at cycle 440505
HALT operation received from [0][6][0] at cycle 440505
HALT operation received from [0][7][0] at cycle 440505
Simulation finished, cycleCount = 440506
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 1256849
RUN TOP_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3193668
RUN BOTTOM_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3480555
RUN REDUCE
Device: 8 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 440505
HALT operation received from [0][1][0] at cycle 440505
HALT operation received from [0][2][0] at cycle 440505
HALT operation received from [0][3][0] at cycle 440505
HALT operation received from [0][4][0] at cycle 440505
HALT operation received from [0][5][0] at cycle 440505
HALT operation received from [0][6][0] at cycle 440505
HALT operation received from [0][7][0] at cycle 440505
Simulation finished, cycleCount = 440506
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 1697355
RUN TOP_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4258224
RUN BOTTOM_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4705095
RUN REDUCE
Device: 8 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 440505
HALT operation received from [0][1][0] at cycle 440505
HALT operation received from [0][2][0] at cycle 440505
HALT operation received from [0][3][0] at cycle 440505
HALT operation received from [0][4][0] at cycle 440505
HALT operation received from [0][5][0] at cycle 440505
HALT operation received from [0][6][0] at cycle 440505
HALT operation received from [0][7][0] at cycle 440505
Simulation finished, cycleCount = 440506
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 2137861
RUN TOP_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5322780
RUN BOTTOM_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5929635
RUN REDUCE
Device: 8 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 440505
HALT operation received from [0][1][0] at cycle 440505
HALT operation received from [0][2][0] at cycle 440505
HALT operation received from [0][3][0] at cycle 440505
HALT operation received from [0][4][0] at cycle 440505
HALT operation received from [0][5][0] at cycle 440505
HALT operation received from [0][6][0] at cycle 440505
HALT operation received from [0][7][0] at cycle 440505
Simulation finished, cycleCount = 440506
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 2578367
RUN TOP_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6387336
RUN BOTTOM_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 7154175
RUN REDUCE
Device: 8 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 440505
HALT operation received from [0][1][0] at cycle 440505
HALT operation received from [0][2][0] at cycle 440505
HALT operation received from [0][3][0] at cycle 440505
HALT operation received from [0][4][0] at cycle 440505
HALT operation received from [0][5][0] at cycle 440505
HALT operation received from [0][6][0] at cycle 440505
HALT operation received from [0][7][0] at cycle 440505
Simulation finished, cycleCount = 440506
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 3018873
RUN TOP_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7451892
RUN BOTTOM_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 8378715
RUN REDUCE
Device: 8 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 440505
HALT operation received from [0][1][0] at cycle 440505
HALT operation received from [0][2][0] at cycle 440505
HALT operation received from [0][3][0] at cycle 440505
HALT operation received from [0][4][0] at cycle 440505
HALT operation received from [0][5][0] at cycle 440505
HALT operation received from [0][6][0] at cycle 440505
HALT operation received from [0][7][0] at cycle 440505
Simulation finished, cycleCount = 440506
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 3459379
RUN TOP_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8516448
RUN BOTTOM_SCAN
Device: 8 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_2wide.xml
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 9603255
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 16 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 375832
HALT operation received from [0][1][0] at cycle 375832
HALT operation received from [0][2][0] at cycle 375832
HALT operation received from [0][3][0] at cycle 375832
HALT operation received from [0][4][0] at cycle 375832
HALT operation received from [0][5][0] at cycle 375832
HALT operation received from [0][6][0] at cycle 375832
HALT operation received from [0][7][0] at cycle 375832
Simulation finished, cycleCount = 375833
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 375833
RUN TOP_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1064556
RUN BOTTOM_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1031471
HALT operation received from [0][1][0] at cycle 1031471
HALT operation received from [0][2][0] at cycle 1031471
HALT operation received from [0][3][0] at cycle 1031471
HALT operation received from [0][4][0] at cycle 1031471
HALT operation received from [0][5][0] at cycle 1031471
HALT operation received from [0][6][0] at cycle 1031471
HALT operation received from [0][7][0] at cycle 1031471
Simulation finished, cycleCount = 1031472
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1031472
RUN REDUCE
Device: 16 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 440502
HALT operation received from [0][1][0] at cycle 440502
HALT operation received from [0][2][0] at cycle 440502
HALT operation received from [0][3][0] at cycle 440502
HALT operation received from [0][4][0] at cycle 440502
HALT operation received from [0][5][0] at cycle 440502
HALT operation received from [0][6][0] at cycle 440502
HALT operation received from [0][7][0] at cycle 440502
Simulation finished, cycleCount = 440503
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 816336
RUN TOP_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2129112
RUN BOTTOM_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2256012
RUN REDUCE
Device: 16 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 440502
HALT operation received from [0][1][0] at cycle 440502
HALT operation received from [0][2][0] at cycle 440502
HALT operation received from [0][3][0] at cycle 440502
HALT operation received from [0][4][0] at cycle 440502
HALT operation received from [0][5][0] at cycle 440502
HALT operation received from [0][6][0] at cycle 440502
HALT operation received from [0][7][0] at cycle 440502
Simulation finished, cycleCount = 440503
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 1256839
RUN TOP_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3193668
RUN BOTTOM_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3480552
RUN REDUCE
Device: 16 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 440502
HALT operation received from [0][1][0] at cycle 440502
HALT operation received from [0][2][0] at cycle 440502
HALT operation received from [0][3][0] at cycle 440502
HALT operation received from [0][4][0] at cycle 440502
HALT operation received from [0][5][0] at cycle 440502
HALT operation received from [0][6][0] at cycle 440502
HALT operation received from [0][7][0] at cycle 440502
Simulation finished, cycleCount = 440503
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 1697342
RUN TOP_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4258224
RUN BOTTOM_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4705092
RUN REDUCE
Device: 16 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 440502
HALT operation received from [0][1][0] at cycle 440502
HALT operation received from [0][2][0] at cycle 440502
HALT operation received from [0][3][0] at cycle 440502
HALT operation received from [0][4][0] at cycle 440502
HALT operation received from [0][5][0] at cycle 440502
HALT operation received from [0][6][0] at cycle 440502
HALT operation received from [0][7][0] at cycle 440502
Simulation finished, cycleCount = 440503
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 2137845
RUN TOP_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5322780
RUN BOTTOM_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5929632
RUN REDUCE
Device: 16 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 440502
HALT operation received from [0][1][0] at cycle 440502
HALT operation received from [0][2][0] at cycle 440502
HALT operation received from [0][3][0] at cycle 440502
HALT operation received from [0][4][0] at cycle 440502
HALT operation received from [0][5][0] at cycle 440502
HALT operation received from [0][6][0] at cycle 440502
HALT operation received from [0][7][0] at cycle 440502
Simulation finished, cycleCount = 440503
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 2578348
RUN TOP_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6387336
RUN BOTTOM_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 7154172
RUN REDUCE
Device: 16 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 440502
HALT operation received from [0][1][0] at cycle 440502
HALT operation received from [0][2][0] at cycle 440502
HALT operation received from [0][3][0] at cycle 440502
HALT operation received from [0][4][0] at cycle 440502
HALT operation received from [0][5][0] at cycle 440502
HALT operation received from [0][6][0] at cycle 440502
HALT operation received from [0][7][0] at cycle 440502
Simulation finished, cycleCount = 440503
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 3018851
RUN TOP_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7451892
RUN BOTTOM_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 8378712
RUN REDUCE
Device: 16 core 2w2a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 440502
HALT operation received from [0][1][0] at cycle 440502
HALT operation received from [0][2][0] at cycle 440502
HALT operation received from [0][3][0] at cycle 440502
HALT operation received from [0][4][0] at cycle 440502
HALT operation received from [0][5][0] at cycle 440502
HALT operation received from [0][6][0] at cycle 440502
HALT operation received from [0][7][0] at cycle 440502
Simulation finished, cycleCount = 440503
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 3459354
RUN TOP_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][1][0] at cycle 15
HALT operation received from [0][2][0] at cycle 15
HALT operation received from [0][3][0] at cycle 15
HALT operation received from [0][4][0] at cycle 15
HALT operation received from [0][5][0] at cycle 15
HALT operation received from [0][6][0] at cycle 15
HALT operation received from [0][7][0] at cycle 15
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1064555
Simulation finished, cycleCount = 1064556
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8516448
RUN BOTTOM_SCAN
Device: 16 core 2w2a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_2wide.xml
HALT operation received from [0][8][0] at cycle 15
HALT operation received from [0][9][0] at cycle 15
HALT operation received from [0][10][0] at cycle 15
HALT operation received from [0][11][0] at cycle 15
HALT operation received from [0][12][0] at cycle 15
HALT operation received from [0][13][0] at cycle 15
HALT operation received from [0][14][0] at cycle 15
HALT operation received from [0][15][0] at cycle 15
HALT operation received from [0][0][0] at cycle 1224539
HALT operation received from [0][1][0] at cycle 1224539
HALT operation received from [0][2][0] at cycle 1224539
HALT operation received from [0][3][0] at cycle 1224539
HALT operation received from [0][4][0] at cycle 1224539
HALT operation received from [0][5][0] at cycle 1224539
HALT operation received from [0][6][0] at cycle 1224539
HALT operation received from [0][7][0] at cycle 1224539
Simulation finished, cycleCount = 1224540
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 9603252
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 1 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 2893629
Simulation finished, cycleCount = 2893630
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 2893630
RUN TOP_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1048302
Simulation finished, cycleCount = 1048303
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1048303
RUN BOTTOM_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7692061
Simulation finished, cycleCount = 7692062
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 7692062
RUN REDUCE
Device: 1 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3202500
Simulation finished, cycleCount = 3202501
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 6096131
RUN TOP_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1048302
Simulation finished, cycleCount = 1048303
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2096606
RUN BOTTOM_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8117093
Simulation finished, cycleCount = 8117094
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 15809156
RUN REDUCE
Device: 1 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3202500
Simulation finished, cycleCount = 3202501
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 9298632
RUN TOP_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1048302
Simulation finished, cycleCount = 1048303
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3144909
RUN BOTTOM_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8117093
Simulation finished, cycleCount = 8117094
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 23926250
RUN REDUCE
Device: 1 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3202500
Simulation finished, cycleCount = 3202501
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 12501133
RUN TOP_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1048302
Simulation finished, cycleCount = 1048303
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4193212
RUN BOTTOM_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8117093
Simulation finished, cycleCount = 8117094
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 32043344
RUN REDUCE
Device: 1 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3202500
Simulation finished, cycleCount = 3202501
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 15703634
RUN TOP_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1048302
Simulation finished, cycleCount = 1048303
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5241515
RUN BOTTOM_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8117093
Simulation finished, cycleCount = 8117094
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 40160438
RUN REDUCE
Device: 1 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3202500
Simulation finished, cycleCount = 3202501
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 18906135
RUN TOP_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1048302
Simulation finished, cycleCount = 1048303
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6289818
RUN BOTTOM_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8117093
Simulation finished, cycleCount = 8117094
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 48277532
RUN REDUCE
Device: 1 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3202500
Simulation finished, cycleCount = 3202501
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 22108636
RUN TOP_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1048302
Simulation finished, cycleCount = 1048303
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7338121
RUN BOTTOM_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8117093
Simulation finished, cycleCount = 8117094
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 56394626
RUN REDUCE
Device: 1 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3202500
Simulation finished, cycleCount = 3202501
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 25311137
RUN TOP_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 1048302
Simulation finished, cycleCount = 1048303
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8386424
RUN BOTTOM_SCAN
Device: 1 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_3wide_1ls.xml
HALT operation received from [0][0][0] at cycle 8117093
Simulation finished, cycleCount = 8117094
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 64511720
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 2 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1446830
HALT operation received from [0][1][0] at cycle 1446830
Simulation finished, cycleCount = 1446831
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1446831
RUN TOP_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1068022
RUN BOTTOM_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 3846046
HALT operation received from [0][1][0] at cycle 3846046
Simulation finished, cycleCount = 3846047
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 3846047
RUN REDUCE
Device: 2 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1601265
HALT operation received from [0][1][0] at cycle 1601265
Simulation finished, cycleCount = 1601266
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 3048097
RUN TOP_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2136044
RUN BOTTOM_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 4058562
HALT operation received from [0][1][0] at cycle 4058562
Simulation finished, cycleCount = 4058563
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 7904610
RUN REDUCE
Device: 2 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1601265
HALT operation received from [0][1][0] at cycle 1601265
Simulation finished, cycleCount = 1601266
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4649363
RUN TOP_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3204066
RUN BOTTOM_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 4058562
HALT operation received from [0][1][0] at cycle 4058562
Simulation finished, cycleCount = 4058563
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 11963173
RUN REDUCE
Device: 2 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1601265
HALT operation received from [0][1][0] at cycle 1601265
Simulation finished, cycleCount = 1601266
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 6250629
RUN TOP_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4272088
RUN BOTTOM_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 4058562
HALT operation received from [0][1][0] at cycle 4058562
Simulation finished, cycleCount = 4058563
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 16021736
RUN REDUCE
Device: 2 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1601265
HALT operation received from [0][1][0] at cycle 1601265
Simulation finished, cycleCount = 1601266
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7851895
RUN TOP_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5340110
RUN BOTTOM_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 4058562
HALT operation received from [0][1][0] at cycle 4058562
Simulation finished, cycleCount = 4058563
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 20080299
RUN REDUCE
Device: 2 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1601265
HALT operation received from [0][1][0] at cycle 1601265
Simulation finished, cycleCount = 1601266
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 9453161
RUN TOP_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6408132
RUN BOTTOM_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 4058562
HALT operation received from [0][1][0] at cycle 4058562
Simulation finished, cycleCount = 4058563
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 24138862
RUN REDUCE
Device: 2 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1601265
HALT operation received from [0][1][0] at cycle 1601265
Simulation finished, cycleCount = 1601266
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 11054427
RUN TOP_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7476154
RUN BOTTOM_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 4058562
HALT operation received from [0][1][0] at cycle 4058562
Simulation finished, cycleCount = 4058563
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 28197425
RUN REDUCE
Device: 2 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1601265
HALT operation received from [0][1][0] at cycle 1601265
Simulation finished, cycleCount = 1601266
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 12655693
RUN TOP_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8544176
RUN BOTTOM_SCAN
Device: 2 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_3wide.xml
HALT operation received from [0][0][0] at cycle 4058562
HALT operation received from [0][1][0] at cycle 4058562
Simulation finished, cycleCount = 4058563
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 32255988
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 4 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 723426
HALT operation received from [0][1][0] at cycle 723426
HALT operation received from [0][2][0] at cycle 723426
HALT operation received from [0][3][0] at cycle 723426
Simulation finished, cycleCount = 723427
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 723427
RUN TOP_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1068022
RUN BOTTOM_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1923034
HALT operation received from [0][1][0] at cycle 1923034
HALT operation received from [0][2][0] at cycle 1923034
HALT operation received from [0][3][0] at cycle 1923034
Simulation finished, cycleCount = 1923035
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1923035
RUN REDUCE
Device: 4 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 800643
HALT operation received from [0][1][0] at cycle 800643
HALT operation received from [0][2][0] at cycle 800643
HALT operation received from [0][3][0] at cycle 800643
Simulation finished, cycleCount = 800644
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1524071
RUN TOP_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2136044
RUN BOTTOM_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 2029292
HALT operation received from [0][1][0] at cycle 2029292
HALT operation received from [0][2][0] at cycle 2029292
HALT operation received from [0][3][0] at cycle 2029292
Simulation finished, cycleCount = 2029293
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 3952328
RUN REDUCE
Device: 4 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 800643
HALT operation received from [0][1][0] at cycle 800643
HALT operation received from [0][2][0] at cycle 800643
HALT operation received from [0][3][0] at cycle 800643
Simulation finished, cycleCount = 800644
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2324715
RUN TOP_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3204066
RUN BOTTOM_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 2029292
HALT operation received from [0][1][0] at cycle 2029292
HALT operation received from [0][2][0] at cycle 2029292
HALT operation received from [0][3][0] at cycle 2029292
Simulation finished, cycleCount = 2029293
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 5981621
RUN REDUCE
Device: 4 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 800643
HALT operation received from [0][1][0] at cycle 800643
HALT operation received from [0][2][0] at cycle 800643
HALT operation received from [0][3][0] at cycle 800643
Simulation finished, cycleCount = 800644
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3125359
RUN TOP_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4272088
RUN BOTTOM_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 2029292
HALT operation received from [0][1][0] at cycle 2029292
HALT operation received from [0][2][0] at cycle 2029292
HALT operation received from [0][3][0] at cycle 2029292
Simulation finished, cycleCount = 2029293
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 8010914
RUN REDUCE
Device: 4 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 800643
HALT operation received from [0][1][0] at cycle 800643
HALT operation received from [0][2][0] at cycle 800643
HALT operation received from [0][3][0] at cycle 800643
Simulation finished, cycleCount = 800644
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 3926003
RUN TOP_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5340110
RUN BOTTOM_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 2029292
HALT operation received from [0][1][0] at cycle 2029292
HALT operation received from [0][2][0] at cycle 2029292
HALT operation received from [0][3][0] at cycle 2029292
Simulation finished, cycleCount = 2029293
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 10040207
RUN REDUCE
Device: 4 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 800643
HALT operation received from [0][1][0] at cycle 800643
HALT operation received from [0][2][0] at cycle 800643
HALT operation received from [0][3][0] at cycle 800643
Simulation finished, cycleCount = 800644
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 4726647
RUN TOP_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6408132
RUN BOTTOM_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 2029292
HALT operation received from [0][1][0] at cycle 2029292
HALT operation received from [0][2][0] at cycle 2029292
HALT operation received from [0][3][0] at cycle 2029292
Simulation finished, cycleCount = 2029293
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 12069500
RUN REDUCE
Device: 4 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 800643
HALT operation received from [0][1][0] at cycle 800643
HALT operation received from [0][2][0] at cycle 800643
HALT operation received from [0][3][0] at cycle 800643
Simulation finished, cycleCount = 800644
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 5527291
RUN TOP_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7476154
RUN BOTTOM_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 2029292
HALT operation received from [0][1][0] at cycle 2029292
HALT operation received from [0][2][0] at cycle 2029292
HALT operation received from [0][3][0] at cycle 2029292
Simulation finished, cycleCount = 2029293
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 14098793
RUN REDUCE
Device: 4 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 800643
HALT operation received from [0][1][0] at cycle 800643
HALT operation received from [0][2][0] at cycle 800643
HALT operation received from [0][3][0] at cycle 800643
Simulation finished, cycleCount = 800644
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 6327935
RUN TOP_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8544176
RUN BOTTOM_SCAN
Device: 4 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_3wide.xml
HALT operation received from [0][0][0] at cycle 2029292
HALT operation received from [0][1][0] at cycle 2029292
HALT operation received from [0][2][0] at cycle 2029292
HALT operation received from [0][3][0] at cycle 2029292
Simulation finished, cycleCount = 2029293
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 16128086
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 8 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 400333
HALT operation received from [0][1][0] at cycle 400333
HALT operation received from [0][2][0] at cycle 400333
HALT operation received from [0][3][0] at cycle 400333
HALT operation received from [0][4][0] at cycle 400333
HALT operation received from [0][5][0] at cycle 400333
HALT operation received from [0][6][0] at cycle 400333
HALT operation received from [0][7][0] at cycle 400333
Simulation finished, cycleCount = 400334
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 400334
RUN TOP_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1068022
RUN BOTTOM_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1014659
HALT operation received from [0][1][0] at cycle 1014659
HALT operation received from [0][2][0] at cycle 1014659
HALT operation received from [0][3][0] at cycle 1014659
HALT operation received from [0][4][0] at cycle 1014659
HALT operation received from [0][5][0] at cycle 1014659
HALT operation received from [0][6][0] at cycle 1014659
HALT operation received from [0][7][0] at cycle 1014659
Simulation finished, cycleCount = 1014660
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1014660
RUN REDUCE
Device: 8 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 407758
HALT operation received from [0][1][0] at cycle 407758
HALT operation received from [0][2][0] at cycle 407758
HALT operation received from [0][3][0] at cycle 407758
HALT operation received from [0][4][0] at cycle 407758
HALT operation received from [0][5][0] at cycle 407758
HALT operation received from [0][6][0] at cycle 407758
HALT operation received from [0][7][0] at cycle 407758
Simulation finished, cycleCount = 407759
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 808093
RUN TOP_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2136044
RUN BOTTOM_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1027176
HALT operation received from [0][1][0] at cycle 1027176
HALT operation received from [0][2][0] at cycle 1027176
HALT operation received from [0][3][0] at cycle 1027176
HALT operation received from [0][4][0] at cycle 1027176
HALT operation received from [0][5][0] at cycle 1027176
HALT operation received from [0][6][0] at cycle 1027176
HALT operation received from [0][7][0] at cycle 1027176
Simulation finished, cycleCount = 1027177
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2041837
RUN REDUCE
Device: 8 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 407758
HALT operation received from [0][1][0] at cycle 407758
HALT operation received from [0][2][0] at cycle 407758
HALT operation received from [0][3][0] at cycle 407758
HALT operation received from [0][4][0] at cycle 407758
HALT operation received from [0][5][0] at cycle 407758
HALT operation received from [0][6][0] at cycle 407758
HALT operation received from [0][7][0] at cycle 407758
Simulation finished, cycleCount = 407759
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 1215852
RUN TOP_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3204066
RUN BOTTOM_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1027176
HALT operation received from [0][1][0] at cycle 1027176
HALT operation received from [0][2][0] at cycle 1027176
HALT operation received from [0][3][0] at cycle 1027176
HALT operation received from [0][4][0] at cycle 1027176
HALT operation received from [0][5][0] at cycle 1027176
HALT operation received from [0][6][0] at cycle 1027176
HALT operation received from [0][7][0] at cycle 1027176
Simulation finished, cycleCount = 1027177
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3069014
RUN REDUCE
Device: 8 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 407758
HALT operation received from [0][1][0] at cycle 407758
HALT operation received from [0][2][0] at cycle 407758
HALT operation received from [0][3][0] at cycle 407758
HALT operation received from [0][4][0] at cycle 407758
HALT operation received from [0][5][0] at cycle 407758
HALT operation received from [0][6][0] at cycle 407758
HALT operation received from [0][7][0] at cycle 407758
Simulation finished, cycleCount = 407759
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 1623611
RUN TOP_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4272088
RUN BOTTOM_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1027176
HALT operation received from [0][1][0] at cycle 1027176
HALT operation received from [0][2][0] at cycle 1027176
HALT operation received from [0][3][0] at cycle 1027176
HALT operation received from [0][4][0] at cycle 1027176
HALT operation received from [0][5][0] at cycle 1027176
HALT operation received from [0][6][0] at cycle 1027176
HALT operation received from [0][7][0] at cycle 1027176
Simulation finished, cycleCount = 1027177
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4096191
RUN REDUCE
Device: 8 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 407758
HALT operation received from [0][1][0] at cycle 407758
HALT operation received from [0][2][0] at cycle 407758
HALT operation received from [0][3][0] at cycle 407758
HALT operation received from [0][4][0] at cycle 407758
HALT operation received from [0][5][0] at cycle 407758
HALT operation received from [0][6][0] at cycle 407758
HALT operation received from [0][7][0] at cycle 407758
Simulation finished, cycleCount = 407759
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 2031370
RUN TOP_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5340110
RUN BOTTOM_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1027176
HALT operation received from [0][1][0] at cycle 1027176
HALT operation received from [0][2][0] at cycle 1027176
HALT operation received from [0][3][0] at cycle 1027176
HALT operation received from [0][4][0] at cycle 1027176
HALT operation received from [0][5][0] at cycle 1027176
HALT operation received from [0][6][0] at cycle 1027176
HALT operation received from [0][7][0] at cycle 1027176
Simulation finished, cycleCount = 1027177
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5123368
RUN REDUCE
Device: 8 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 407758
HALT operation received from [0][1][0] at cycle 407758
HALT operation received from [0][2][0] at cycle 407758
HALT operation received from [0][3][0] at cycle 407758
HALT operation received from [0][4][0] at cycle 407758
HALT operation received from [0][5][0] at cycle 407758
HALT operation received from [0][6][0] at cycle 407758
HALT operation received from [0][7][0] at cycle 407758
Simulation finished, cycleCount = 407759
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 2439129
RUN TOP_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6408132
RUN BOTTOM_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1027176
HALT operation received from [0][1][0] at cycle 1027176
HALT operation received from [0][2][0] at cycle 1027176
HALT operation received from [0][3][0] at cycle 1027176
HALT operation received from [0][4][0] at cycle 1027176
HALT operation received from [0][5][0] at cycle 1027176
HALT operation received from [0][6][0] at cycle 1027176
HALT operation received from [0][7][0] at cycle 1027176
Simulation finished, cycleCount = 1027177
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6150545
RUN REDUCE
Device: 8 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 407758
HALT operation received from [0][1][0] at cycle 407758
HALT operation received from [0][2][0] at cycle 407758
HALT operation received from [0][3][0] at cycle 407758
HALT operation received from [0][4][0] at cycle 407758
HALT operation received from [0][5][0] at cycle 407758
HALT operation received from [0][6][0] at cycle 407758
HALT operation received from [0][7][0] at cycle 407758
Simulation finished, cycleCount = 407759
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 2846888
RUN TOP_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7476154
RUN BOTTOM_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1027176
HALT operation received from [0][1][0] at cycle 1027176
HALT operation received from [0][2][0] at cycle 1027176
HALT operation received from [0][3][0] at cycle 1027176
HALT operation received from [0][4][0] at cycle 1027176
HALT operation received from [0][5][0] at cycle 1027176
HALT operation received from [0][6][0] at cycle 1027176
HALT operation received from [0][7][0] at cycle 1027176
Simulation finished, cycleCount = 1027177
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7177722
RUN REDUCE
Device: 8 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 407758
HALT operation received from [0][1][0] at cycle 407758
HALT operation received from [0][2][0] at cycle 407758
HALT operation received from [0][3][0] at cycle 407758
HALT operation received from [0][4][0] at cycle 407758
HALT operation received from [0][5][0] at cycle 407758
HALT operation received from [0][6][0] at cycle 407758
HALT operation received from [0][7][0] at cycle 407758
Simulation finished, cycleCount = 407759
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 3254647
RUN TOP_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8544176
RUN BOTTOM_SCAN
Device: 8 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_3wide.xml
HALT operation received from [0][0][0] at cycle 1027176
HALT operation received from [0][1][0] at cycle 1027176
HALT operation received from [0][2][0] at cycle 1027176
HALT operation received from [0][3][0] at cycle 1027176
HALT operation received from [0][4][0] at cycle 1027176
HALT operation received from [0][5][0] at cycle 1027176
HALT operation received from [0][6][0] at cycle 1027176
HALT operation received from [0][7][0] at cycle 1027176
Simulation finished, cycleCount = 1027177
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8204899
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 16 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 361724
HALT operation received from [0][1][0] at cycle 361724
HALT operation received from [0][2][0] at cycle 361724
HALT operation received from [0][3][0] at cycle 361724
HALT operation received from [0][4][0] at cycle 361724
HALT operation received from [0][5][0] at cycle 361724
HALT operation received from [0][6][0] at cycle 361724
HALT operation received from [0][7][0] at cycle 361724
Simulation finished, cycleCount = 361725
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 361725
RUN TOP_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1068022
RUN BOTTOM_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 961528
HALT operation received from [0][1][0] at cycle 961528
HALT operation received from [0][2][0] at cycle 961528
HALT operation received from [0][3][0] at cycle 961528
HALT operation received from [0][4][0] at cycle 961528
HALT operation received from [0][5][0] at cycle 961528
HALT operation received from [0][6][0] at cycle 961528
HALT operation received from [0][7][0] at cycle 961528
Simulation finished, cycleCount = 961529
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 961529
RUN REDUCE
Device: 16 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 400332
HALT operation received from [0][1][0] at cycle 400332
HALT operation received from [0][2][0] at cycle 400332
HALT operation received from [0][3][0] at cycle 400332
HALT operation received from [0][4][0] at cycle 400332
HALT operation received from [0][5][0] at cycle 400332
HALT operation received from [0][6][0] at cycle 400332
HALT operation received from [0][7][0] at cycle 400332
Simulation finished, cycleCount = 400333
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 762058
RUN TOP_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 2136044
RUN BOTTOM_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1014657
HALT operation received from [0][1][0] at cycle 1014657
HALT operation received from [0][2][0] at cycle 1014657
HALT operation received from [0][3][0] at cycle 1014657
HALT operation received from [0][4][0] at cycle 1014657
HALT operation received from [0][5][0] at cycle 1014657
HALT operation received from [0][6][0] at cycle 1014657
HALT operation received from [0][7][0] at cycle 1014657
Simulation finished, cycleCount = 1014658
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1976187
RUN REDUCE
Device: 16 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 400332
HALT operation received from [0][1][0] at cycle 400332
HALT operation received from [0][2][0] at cycle 400332
HALT operation received from [0][3][0] at cycle 400332
HALT operation received from [0][4][0] at cycle 400332
HALT operation received from [0][5][0] at cycle 400332
HALT operation received from [0][6][0] at cycle 400332
HALT operation received from [0][7][0] at cycle 400332
Simulation finished, cycleCount = 400333
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 1162391
RUN TOP_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3204066
RUN BOTTOM_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1014657
HALT operation received from [0][1][0] at cycle 1014657
HALT operation received from [0][2][0] at cycle 1014657
HALT operation received from [0][3][0] at cycle 1014657
HALT operation received from [0][4][0] at cycle 1014657
HALT operation received from [0][5][0] at cycle 1014657
HALT operation received from [0][6][0] at cycle 1014657
HALT operation received from [0][7][0] at cycle 1014657
Simulation finished, cycleCount = 1014658
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2990845
RUN REDUCE
Device: 16 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 400332
HALT operation received from [0][1][0] at cycle 400332
HALT operation received from [0][2][0] at cycle 400332
HALT operation received from [0][3][0] at cycle 400332
HALT operation received from [0][4][0] at cycle 400332
HALT operation received from [0][5][0] at cycle 400332
HALT operation received from [0][6][0] at cycle 400332
HALT operation received from [0][7][0] at cycle 400332
Simulation finished, cycleCount = 400333
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 1562724
RUN TOP_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4272088
RUN BOTTOM_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1014657
HALT operation received from [0][1][0] at cycle 1014657
HALT operation received from [0][2][0] at cycle 1014657
HALT operation received from [0][3][0] at cycle 1014657
HALT operation received from [0][4][0] at cycle 1014657
HALT operation received from [0][5][0] at cycle 1014657
HALT operation received from [0][6][0] at cycle 1014657
HALT operation received from [0][7][0] at cycle 1014657
Simulation finished, cycleCount = 1014658
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4005503
RUN REDUCE
Device: 16 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 400332
HALT operation received from [0][1][0] at cycle 400332
HALT operation received from [0][2][0] at cycle 400332
HALT operation received from [0][3][0] at cycle 400332
HALT operation received from [0][4][0] at cycle 400332
HALT operation received from [0][5][0] at cycle 400332
HALT operation received from [0][6][0] at cycle 400332
HALT operation received from [0][7][0] at cycle 400332
Simulation finished, cycleCount = 400333
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 1963057
RUN TOP_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5340110
RUN BOTTOM_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1014657
HALT operation received from [0][1][0] at cycle 1014657
HALT operation received from [0][2][0] at cycle 1014657
HALT operation received from [0][3][0] at cycle 1014657
HALT operation received from [0][4][0] at cycle 1014657
HALT operation received from [0][5][0] at cycle 1014657
HALT operation received from [0][6][0] at cycle 1014657
HALT operation received from [0][7][0] at cycle 1014657
Simulation finished, cycleCount = 1014658
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5020161
RUN REDUCE
Device: 16 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 400332
HALT operation received from [0][1][0] at cycle 400332
HALT operation received from [0][2][0] at cycle 400332
HALT operation received from [0][3][0] at cycle 400332
HALT operation received from [0][4][0] at cycle 400332
HALT operation received from [0][5][0] at cycle 400332
HALT operation received from [0][6][0] at cycle 400332
HALT operation received from [0][7][0] at cycle 400332
Simulation finished, cycleCount = 400333
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 2363390
RUN TOP_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6408132
RUN BOTTOM_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1014657
HALT operation received from [0][1][0] at cycle 1014657
HALT operation received from [0][2][0] at cycle 1014657
HALT operation received from [0][3][0] at cycle 1014657
HALT operation received from [0][4][0] at cycle 1014657
HALT operation received from [0][5][0] at cycle 1014657
HALT operation received from [0][6][0] at cycle 1014657
HALT operation received from [0][7][0] at cycle 1014657
Simulation finished, cycleCount = 1014658
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6034819
RUN REDUCE
Device: 16 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 400332
HALT operation received from [0][1][0] at cycle 400332
HALT operation received from [0][2][0] at cycle 400332
HALT operation received from [0][3][0] at cycle 400332
HALT operation received from [0][4][0] at cycle 400332
HALT operation received from [0][5][0] at cycle 400332
HALT operation received from [0][6][0] at cycle 400332
HALT operation received from [0][7][0] at cycle 400332
Simulation finished, cycleCount = 400333
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 2763723
RUN TOP_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7476154
RUN BOTTOM_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1014657
HALT operation received from [0][1][0] at cycle 1014657
HALT operation received from [0][2][0] at cycle 1014657
HALT operation received from [0][3][0] at cycle 1014657
HALT operation received from [0][4][0] at cycle 1014657
HALT operation received from [0][5][0] at cycle 1014657
HALT operation received from [0][6][0] at cycle 1014657
HALT operation received from [0][7][0] at cycle 1014657
Simulation finished, cycleCount = 1014658
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7049477
RUN REDUCE
Device: 16 core 3w3a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 400332
HALT operation received from [0][1][0] at cycle 400332
HALT operation received from [0][2][0] at cycle 400332
HALT operation received from [0][3][0] at cycle 400332
HALT operation received from [0][4][0] at cycle 400332
HALT operation received from [0][5][0] at cycle 400332
HALT operation received from [0][6][0] at cycle 400332
HALT operation received from [0][7][0] at cycle 400332
Simulation finished, cycleCount = 400333
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 3164056
RUN TOP_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1068021
Simulation finished, cycleCount = 1068022
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8544176
RUN BOTTOM_SCAN
Device: 16 core 3w3a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_3wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1014657
HALT operation received from [0][1][0] at cycle 1014657
HALT operation received from [0][2][0] at cycle 1014657
HALT operation received from [0][3][0] at cycle 1014657
HALT operation received from [0][4][0] at cycle 1014657
HALT operation received from [0][5][0] at cycle 1014657
HALT operation received from [0][6][0] at cycle 1014657
HALT operation received from [0][7][0] at cycle 1014657
Simulation finished, cycleCount = 1014658
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8064135
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 1 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 3155277
Simulation finished, cycleCount = 3155278
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 3155278
RUN TOP_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 904575
Simulation finished, cycleCount = 904576
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 904576
RUN BOTTOM_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7022708
Simulation finished, cycleCount = 7022709
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 7022709
RUN REDUCE
Device: 1 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 2930261
Simulation finished, cycleCount = 2930262
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 6085540
RUN TOP_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 904575
Simulation finished, cycleCount = 904576
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1809152
RUN BOTTOM_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7261724
Simulation finished, cycleCount = 7261725
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 14284434
RUN REDUCE
Device: 1 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 2930261
Simulation finished, cycleCount = 2930262
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 9015802
RUN TOP_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 904575
Simulation finished, cycleCount = 904576
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2713728
RUN BOTTOM_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7261724
Simulation finished, cycleCount = 7261725
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 21546159
RUN REDUCE
Device: 1 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 2930261
Simulation finished, cycleCount = 2930262
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 11946064
RUN TOP_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 904575
Simulation finished, cycleCount = 904576
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3618304
RUN BOTTOM_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7261724
Simulation finished, cycleCount = 7261725
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 28807884
RUN REDUCE
Device: 1 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 2930261
Simulation finished, cycleCount = 2930262
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 14876326
RUN TOP_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 904575
Simulation finished, cycleCount = 904576
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 4522880
RUN BOTTOM_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7261724
Simulation finished, cycleCount = 7261725
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 36069609
RUN REDUCE
Device: 1 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 2930261
Simulation finished, cycleCount = 2930262
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 17806588
RUN TOP_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 904575
Simulation finished, cycleCount = 904576
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 5427456
RUN BOTTOM_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7261724
Simulation finished, cycleCount = 7261725
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 43331334
RUN REDUCE
Device: 1 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 2930261
Simulation finished, cycleCount = 2930262
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 20736850
RUN TOP_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 904575
Simulation finished, cycleCount = 904576
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 6332032
RUN BOTTOM_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7261724
Simulation finished, cycleCount = 7261725
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 50593059
RUN REDUCE
Device: 1 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 9788
Size of bss area : 
End of memory: 78304
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 2930261
Simulation finished, cycleCount = 2930262
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 23667112
RUN TOP_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 2620
Size of bss area : 
End of memory: 20960
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 904575
Simulation finished, cycleCount = 904576
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 7236608
RUN BOTTOM_SCAN
Device: 1 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 1;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 19004
Size of bss area : 
End of memory: 152032
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  Default_4wide_1ls.xml
HALT operation received from [0][0][0] at cycle 7261724
Simulation finished, cycleCount = 7261725
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 57854784
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 2 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1465132
HALT operation received from [0][1][0] at cycle 1465132
Simulation finished, cycleCount = 1465133
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1465133
RUN TOP_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 974053
RUN BOTTOM_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 3630863
HALT operation received from [0][1][0] at cycle 3630863
Simulation finished, cycleCount = 3630864
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 3630864
RUN REDUCE
Device: 2 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1581739
HALT operation received from [0][1][0] at cycle 1581739
Simulation finished, cycleCount = 1581740
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 3046873
RUN TOP_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1948106
RUN BOTTOM_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 4243976
HALT operation received from [0][1][0] at cycle 4243976
Simulation finished, cycleCount = 4243977
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 7874841
RUN REDUCE
Device: 2 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1581739
HALT operation received from [0][1][0] at cycle 1581739
Simulation finished, cycleCount = 1581740
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 4628613
RUN TOP_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2922159
RUN BOTTOM_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 4243976
HALT operation received from [0][1][0] at cycle 4243976
Simulation finished, cycleCount = 4243977
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 12118818
RUN REDUCE
Device: 2 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1581739
HALT operation received from [0][1][0] at cycle 1581739
Simulation finished, cycleCount = 1581740
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 6210353
RUN TOP_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3896212
RUN BOTTOM_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 4243976
HALT operation received from [0][1][0] at cycle 4243976
Simulation finished, cycleCount = 4243977
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 16362795
RUN REDUCE
Device: 2 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1581739
HALT operation received from [0][1][0] at cycle 1581739
Simulation finished, cycleCount = 1581740
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 7792093
RUN TOP_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 4870265
RUN BOTTOM_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 4243976
HALT operation received from [0][1][0] at cycle 4243976
Simulation finished, cycleCount = 4243977
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 20606772
RUN REDUCE
Device: 2 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1581739
HALT operation received from [0][1][0] at cycle 1581739
Simulation finished, cycleCount = 1581740
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 9373833
RUN TOP_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 5844318
RUN BOTTOM_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 4243976
HALT operation received from [0][1][0] at cycle 4243976
Simulation finished, cycleCount = 4243977
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 24850749
RUN REDUCE
Device: 2 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1581739
HALT operation received from [0][1][0] at cycle 1581739
Simulation finished, cycleCount = 1581740
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 10955573
RUN TOP_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 6818371
RUN BOTTOM_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 4243976
HALT operation received from [0][1][0] at cycle 4243976
Simulation finished, cycleCount = 4243977
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 29094726
RUN REDUCE
Device: 2 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 10816
Size of bss area : 
End of memory: 86528
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1581739
HALT operation received from [0][1][0] at cycle 1581739
Simulation finished, cycleCount = 1581740
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 12537313
RUN TOP_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 4672
Size of bss area : 
End of memory: 37376
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 7792424
RUN BOTTOM_SCAN
Device: 2 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 2;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 21056
Size of bss area : 
End of memory: 168448
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  2Context_4wide.xml
HALT operation received from [0][0][0] at cycle 4243976
HALT operation received from [0][1][0] at cycle 4243976
Simulation finished, cycleCount = 4243977
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 33338703
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 4 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 732576
HALT operation received from [0][1][0] at cycle 732576
HALT operation received from [0][2][0] at cycle 732576
HALT operation received from [0][3][0] at cycle 732576
Simulation finished, cycleCount = 732577
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 732577
RUN TOP_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 974053
RUN BOTTOM_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1815441
HALT operation received from [0][1][0] at cycle 1815441
HALT operation received from [0][2][0] at cycle 1815441
HALT operation received from [0][3][0] at cycle 1815441
Simulation finished, cycleCount = 1815442
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 1815442
RUN REDUCE
Device: 4 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 790879
HALT operation received from [0][1][0] at cycle 790879
HALT operation received from [0][2][0] at cycle 790879
HALT operation received from [0][3][0] at cycle 790879
Simulation finished, cycleCount = 790880
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1523457
RUN TOP_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1948106
RUN BOTTOM_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 2121998
HALT operation received from [0][1][0] at cycle 2121998
HALT operation received from [0][2][0] at cycle 2121998
HALT operation received from [0][3][0] at cycle 2121998
Simulation finished, cycleCount = 2121999
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 3937441
RUN REDUCE
Device: 4 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 790879
HALT operation received from [0][1][0] at cycle 790879
HALT operation received from [0][2][0] at cycle 790879
HALT operation received from [0][3][0] at cycle 790879
Simulation finished, cycleCount = 790880
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2314337
RUN TOP_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2922159
RUN BOTTOM_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 2121998
HALT operation received from [0][1][0] at cycle 2121998
HALT operation received from [0][2][0] at cycle 2121998
HALT operation received from [0][3][0] at cycle 2121998
Simulation finished, cycleCount = 2121999
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 6059440
RUN REDUCE
Device: 4 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 790879
HALT operation received from [0][1][0] at cycle 790879
HALT operation received from [0][2][0] at cycle 790879
HALT operation received from [0][3][0] at cycle 790879
Simulation finished, cycleCount = 790880
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3105217
RUN TOP_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3896212
RUN BOTTOM_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 2121998
HALT operation received from [0][1][0] at cycle 2121998
HALT operation received from [0][2][0] at cycle 2121998
HALT operation received from [0][3][0] at cycle 2121998
Simulation finished, cycleCount = 2121999
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 8181439
RUN REDUCE
Device: 4 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 790879
HALT operation received from [0][1][0] at cycle 790879
HALT operation received from [0][2][0] at cycle 790879
HALT operation received from [0][3][0] at cycle 790879
Simulation finished, cycleCount = 790880
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 3896097
RUN TOP_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 4870265
RUN BOTTOM_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 2121998
HALT operation received from [0][1][0] at cycle 2121998
HALT operation received from [0][2][0] at cycle 2121998
HALT operation received from [0][3][0] at cycle 2121998
Simulation finished, cycleCount = 2121999
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 10303438
RUN REDUCE
Device: 4 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 790879
HALT operation received from [0][1][0] at cycle 790879
HALT operation received from [0][2][0] at cycle 790879
HALT operation received from [0][3][0] at cycle 790879
Simulation finished, cycleCount = 790880
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 4686977
RUN TOP_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 5844318
RUN BOTTOM_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 2121998
HALT operation received from [0][1][0] at cycle 2121998
HALT operation received from [0][2][0] at cycle 2121998
HALT operation received from [0][3][0] at cycle 2121998
Simulation finished, cycleCount = 2121999
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 12425437
RUN REDUCE
Device: 4 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 790879
HALT operation received from [0][1][0] at cycle 790879
HALT operation received from [0][2][0] at cycle 790879
HALT operation received from [0][3][0] at cycle 790879
Simulation finished, cycleCount = 790880
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 5477857
RUN TOP_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 6818371
RUN BOTTOM_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 2121998
HALT operation received from [0][1][0] at cycle 2121998
HALT operation received from [0][2][0] at cycle 2121998
HALT operation received from [0][3][0] at cycle 2121998
Simulation finished, cycleCount = 2121999
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 14547436
RUN REDUCE
Device: 4 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 12872
Size of bss area : 
End of memory: 102976
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 790879
HALT operation received from [0][1][0] at cycle 790879
HALT operation received from [0][2][0] at cycle 790879
HALT operation received from [0][3][0] at cycle 790879
Simulation finished, cycleCount = 790880
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 6268737
RUN TOP_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 8776
Size of bss area : 
End of memory: 70208
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 7792424
RUN BOTTOM_SCAN
Device: 4 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 4;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25160
Size of bss area : 
End of memory: 201280
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  4Context_4wide.xml
HALT operation received from [0][0][0] at cycle 2121998
HALT operation received from [0][1][0] at cycle 2121998
HALT operation received from [0][2][0] at cycle 2121998
HALT operation received from [0][3][0] at cycle 2121998
Simulation finished, cycleCount = 2121999
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 16669435
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 8 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 366301
HALT operation received from [0][1][0] at cycle 366301
HALT operation received from [0][2][0] at cycle 366301
HALT operation received from [0][3][0] at cycle 366301
HALT operation received from [0][4][0] at cycle 366301
HALT operation received from [0][5][0] at cycle 366301
HALT operation received from [0][6][0] at cycle 366301
HALT operation received from [0][7][0] at cycle 366301
Simulation finished, cycleCount = 366302
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 366302
RUN TOP_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 974053
RUN BOTTOM_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 907732
HALT operation received from [0][1][0] at cycle 907732
HALT operation received from [0][2][0] at cycle 907732
HALT operation received from [0][3][0] at cycle 907732
HALT operation received from [0][4][0] at cycle 907732
HALT operation received from [0][5][0] at cycle 907732
HALT operation received from [0][6][0] at cycle 907732
HALT operation received from [0][7][0] at cycle 907732
Simulation finished, cycleCount = 907733
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 907733
RUN REDUCE
Device: 8 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 395451
HALT operation received from [0][1][0] at cycle 395451
HALT operation received from [0][2][0] at cycle 395451
HALT operation received from [0][3][0] at cycle 395451
HALT operation received from [0][4][0] at cycle 395451
HALT operation received from [0][5][0] at cycle 395451
HALT operation received from [0][6][0] at cycle 395451
HALT operation received from [0][7][0] at cycle 395451
Simulation finished, cycleCount = 395452
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 761754
RUN TOP_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1948106
RUN BOTTOM_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1968743
RUN REDUCE
Device: 8 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 395451
HALT operation received from [0][1][0] at cycle 395451
HALT operation received from [0][2][0] at cycle 395451
HALT operation received from [0][3][0] at cycle 395451
HALT operation received from [0][4][0] at cycle 395451
HALT operation received from [0][5][0] at cycle 395451
HALT operation received from [0][6][0] at cycle 395451
HALT operation received from [0][7][0] at cycle 395451
Simulation finished, cycleCount = 395452
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 1157206
RUN TOP_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2922159
RUN BOTTOM_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3029753
RUN REDUCE
Device: 8 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 395451
HALT operation received from [0][1][0] at cycle 395451
HALT operation received from [0][2][0] at cycle 395451
HALT operation received from [0][3][0] at cycle 395451
HALT operation received from [0][4][0] at cycle 395451
HALT operation received from [0][5][0] at cycle 395451
HALT operation received from [0][6][0] at cycle 395451
HALT operation received from [0][7][0] at cycle 395451
Simulation finished, cycleCount = 395452
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 1552658
RUN TOP_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3896212
RUN BOTTOM_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4090763
RUN REDUCE
Device: 8 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 395451
HALT operation received from [0][1][0] at cycle 395451
HALT operation received from [0][2][0] at cycle 395451
HALT operation received from [0][3][0] at cycle 395451
HALT operation received from [0][4][0] at cycle 395451
HALT operation received from [0][5][0] at cycle 395451
HALT operation received from [0][6][0] at cycle 395451
HALT operation received from [0][7][0] at cycle 395451
Simulation finished, cycleCount = 395452
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 1948110
RUN TOP_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 4870265
RUN BOTTOM_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5151773
RUN REDUCE
Device: 8 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 395451
HALT operation received from [0][1][0] at cycle 395451
HALT operation received from [0][2][0] at cycle 395451
HALT operation received from [0][3][0] at cycle 395451
HALT operation received from [0][4][0] at cycle 395451
HALT operation received from [0][5][0] at cycle 395451
HALT operation received from [0][6][0] at cycle 395451
HALT operation received from [0][7][0] at cycle 395451
Simulation finished, cycleCount = 395452
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 2343562
RUN TOP_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 5844318
RUN BOTTOM_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6212783
RUN REDUCE
Device: 8 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 395451
HALT operation received from [0][1][0] at cycle 395451
HALT operation received from [0][2][0] at cycle 395451
HALT operation received from [0][3][0] at cycle 395451
HALT operation received from [0][4][0] at cycle 395451
HALT operation received from [0][5][0] at cycle 395451
HALT operation received from [0][6][0] at cycle 395451
HALT operation received from [0][7][0] at cycle 395451
Simulation finished, cycleCount = 395452
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 2739014
RUN TOP_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 6818371
RUN BOTTOM_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7273793
RUN REDUCE
Device: 8 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 395451
HALT operation received from [0][1][0] at cycle 395451
HALT operation received from [0][2][0] at cycle 395451
HALT operation received from [0][3][0] at cycle 395451
HALT operation received from [0][4][0] at cycle 395451
HALT operation received from [0][5][0] at cycle 395451
HALT operation received from [0][6][0] at cycle 395451
HALT operation received from [0][7][0] at cycle 395451
Simulation finished, cycleCount = 395452
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 3134466
RUN TOP_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 16984
Size of bss area : 
End of memory: 135872
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 7792424
RUN BOTTOM_SCAN
Device: 8 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 8;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33368
Size of bss area : 
End of memory: 266944
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  8Context_4wide.xml
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8334803
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed


OpenCL

OpenCL::getDevices

=== 1 OpenCL platform(s) found: ===
  -- 0 --
  PROFILE = FULL_PROFILE
  VERSION = OpenCL 1.1 MESA 0.1.0
  NAME = Default
  VENDOR = Mesa
  EXTENSIONS = cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
Using the default platform (platform 0)...

=== 20 OpenCL device(s) found on platform:
  -- 0 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 1 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 2 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 3 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 4 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 5 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 6 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 7 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 8 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 9 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 10 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 11 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 12 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 13 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 14 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 15 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 1
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 16 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 2
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 17 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 4
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 18 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 8
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824
  -- 19 --
  DEVICE_NAME = LE1
  DEVICE_VENDOR = ESDG
  DEVICE_VERSION = OpenCL 1.1 ESDG- 0.1.0
  DRIVER_VERSION = 0.1.0
  DEVICE_MAX_COMPUTE_UNITS = 16
  DEVICE_MAX_CLOCK_FREQUENCY = 0
  DEVICE_GLOBAL_MEM_SIZE = 1073741824
  CL_DEVICE_LOCAL_MEM_SIZE = 1073741824

homogeneous system
OpenCL::buildKernel
#define FPTYPE int
#define FPVECTYPE uint4

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable 


// Compute a per block histogram of the occurrences of each
// digit, using a 4-bit radix (i.e. 16 possible digits).
__kernel void
reduce(__global const FPTYPE * in, 
       __global FPTYPE * isums, 
       const int n,
       __local FPTYPE * lmem,
       const int shift) 
{
    // First, calculate the bounds of the region of the array 
    // that this block will sum.  We need these regions to match
    // perfectly with those in the bottom-level scan, so we index
    // as if vector types of length 4 were in use.  This prevents
    // errors due to slightly misaligned regions.
    int region_size = ((n / 4) / get_num_groups(0)) * 4;
    int block_start = get_group_id(0) * region_size;

    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n : block_start + region_size;

    // Calculate starting index for this thread/work item
    int tid = get_local_id(0);
    int i = block_start + tid;
    
    // The per thread histogram, initially 0's.
    int digit_counts[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                             0, 0, 0, 0, 0, 0, 0, 0 };

    // Reduce multiple elements per thread
    while (i < block_stop)
    {
        // This statement 
        // 1) Loads the value in from global memory
        // 2) Shifts to the right to have the 4 bits of interest
        //    in the least significant places
        // 3) Masks any more significant bits away. This leaves us
        // with the relevant digit (which is also the index into the
        // histogram). Next increment the histogram to count this occurrence.
        digit_counts[(in[i] >> shift) & 0xFU]++;
        i += get_local_size(0);
    }
    
    for (int d = 0; d < 16; d++)
    {
        // Load this thread's sum into local/shared memory
        lmem[tid] = digit_counts[d];
        barrier(CLK_LOCAL_MEM_FENCE);

        // Reduce the contents of shared/local memory
        for (unsigned int s = get_local_size(0) / 2; s > 0; s >>= 1)
        {
            if (tid < s)
            {
                lmem[tid] += lmem[tid + s];
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        // Write result for this block to global memory
        if (tid == 0)
        {
            isums[(d * get_num_groups(0)) + get_group_id(0)] = lmem[0];
        }
    }
}

// This kernel scans the contents of local memory using a work
// inefficient, but highly parallel Kogge-Stone style scan.
// Set exclusive to 1 for an exclusive scan or 0 for an inclusive scan
inline FPTYPE scanLocalMem(FPTYPE val_arg, __local FPTYPE* lmem_arg, int exclusive){
    // Set first half of local memory to zero to make room for scanning
    int idx = get_local_id(0);
    lmem_arg[idx] = 0;
    
    // Set second half to block sums from global memory, but don't go out
    // of bounds
    idx += get_local_size(0);
    lmem_arg[idx] = val_arg;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    // Now, perform Kogge-Stone scan
    FPTYPE t;
    for (int i = 1; i < get_local_size(0); i *= 2)
    {
        t = lmem_arg[idx -  i]; barrier(CLK_LOCAL_MEM_FENCE);
        lmem_arg[idx] += t;     barrier(CLK_LOCAL_MEM_FENCE);
    }
    return lmem_arg[idx-exclusive];
}

// This single group kernel takes the per block histograms
// from the reduction and performs an exclusive scan on them.
__kernel void
top_scan(__global FPTYPE * isums, 
         const int n,
         __local FPTYPE * lmem)
{
    __local int s_seed;
    s_seed = 0; barrier(CLK_LOCAL_MEM_FENCE);
    
    // Decide if this is the last thread that needs to 
    // propagate the seed value
    int last_thread = (get_local_id(0) < n &&
                      (get_local_id(0)+1) == n) ? 1 : 0;

    for (int d = 0; d < 16; d++)
    {
        FPTYPE val = 0;
        // Load each block's count for digit d
        if (get_local_id(0) < n)
        {
            val = isums[(n * d) + get_local_id(0)];
        }
        // Exclusive scan the counts in local memory
        FPTYPE res = scanLocalMem(val, lmem, 1);
        // Write scanned value out to global
        if (get_local_id(0) < n)
        {
            isums[(n * d) + get_local_id(0)] = res + s_seed;
        }
        
        if (last_thread) 
        {
            s_seed += res + val;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
}


__kernel void 
bottom_scan(__global const FPTYPE * in,
            __global const FPTYPE * isums,
            __global FPTYPE * out,
            const int n,
            __local FPTYPE * lmem,
            const int shift)
{
    // Use local memory to cache the scanned seeds
    __local FPTYPE l_scanned_seeds[16];
    
    // Keep a shared histogram of all instances seen by the current
    // block
    __local FPTYPE l_block_counts[16];
    
    // Keep a private histogram as well
    __private int histogram[16] = { 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0  };

    // Prepare for reading 4-element vectors
    // Assume n is divisible by 4
    __global FPVECTYPE *in4  = (__global FPVECTYPE*) in;
    __global FPVECTYPE *out4 = (__global FPVECTYPE*) out;
    int n4 = n / 4; //vector type is 4 wide
    
    int region_size = n4 / get_num_groups(0);
    int block_start = get_group_id(0) * region_size;
    // Give the last block any extra elements
    int block_stop  = (get_group_id(0) == get_num_groups(0) - 1) ? 
        n4 : block_start + region_size;

    // Calculate starting index for this thread/work item
    int i = block_start + get_local_id(0);
    int window = block_start;

    // Set the histogram in local memory to zero
    // and read in the scanned seeds from gmem
    if (get_local_id(0) < 16)
    {
        l_block_counts[get_local_id(0)] = 0;
        l_scanned_seeds[get_local_id(0)] = 
            isums[(get_local_id(0)*get_num_groups(0))+get_group_id(0)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    // Scan multiple elements per thread
    while (window < block_stop)
    {
        // Reset histogram
        for (int q = 0; q < 16; q++) histogram[q] = 0;
        FPVECTYPE val_4;
        FPVECTYPE key_4;        

        if (i < block_stop) // Make sure we don't read out of bounds
        {
            val_4 = in4[i];
            
            // Mask the keys to get the appropriate digit
            key_4.x = (val_4.x >> shift) & 0xFU;
            key_4.y = (val_4.y >> shift) & 0xFU;
            key_4.z = (val_4.z >> shift) & 0xFU;
            key_4.w = (val_4.w >> shift) & 0xFU;
            
            // Update the histogram
            histogram[key_4.x]++;
            histogram[key_4.y]++;
            histogram[key_4.z]++;
            histogram[key_4.w]++;
        } 
                
        // Scan the digit counts in local memory
        for (int digit = 0; digit < 16; digit++)
        {
            histogram[digit] = scanLocalMem(histogram[digit], lmem, 1);
            barrier(CLK_LOCAL_MEM_FENCE);
        }

        if (i < block_stop) // Make sure we don't write out of bounds
        {
            int address;
            address = histogram[key_4.x] + l_scanned_seeds[key_4.x] + l_block_counts[key_4.x];
            out[address] = val_4.x;
            histogram[key_4.x]++;
            
            address = histogram[key_4.y] + l_scanned_seeds[key_4.y] + l_block_counts[key_4.y];
            out[address] = val_4.y;
            histogram[key_4.y]++;
            
            address = histogram[key_4.z] + l_scanned_seeds[key_4.z] + l_block_counts[key_4.z];
            out[address] = val_4.z;
            histogram[key_4.z]++;
            
            address = histogram[key_4.w] + l_scanned_seeds[key_4.w] + l_block_counts[key_4.w];
            out[address] = val_4.w;
            histogram[key_4.w]++;
        }
                
        // Before proceeding, make sure everyone has finished their current
        // indexing computations.
        barrier(CLK_LOCAL_MEM_FENCE);
        // Now update the seed array.
        if (get_local_id(0) == get_local_size(0)-1)
        {
            for (int q = 0; q < 16; q++)
            {
                 l_block_counts[q] += histogram[q];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        // Advance window
        window += get_local_size(0);
        i += get_local_size(0);
    }
}


*************************************************
***   OUTPUT FROM COMPILING THE KERNEL FILE   ***
*************************************************


*************************************************
*** END OUTPUT FROM COMPILING THE KERNEL FILE ***
*************************************************


Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Max local threads is 256. Using 256 for local work size. 
Initializing host memory.
Copying input data to device.
RUN REDUCE
Device: 16 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 366298
HALT operation received from [0][1][0] at cycle 366298
HALT operation received from [0][2][0] at cycle 366298
HALT operation received from [0][3][0] at cycle 366298
HALT operation received from [0][4][0] at cycle 366298
HALT operation received from [0][5][0] at cycle 366298
HALT operation received from [0][6][0] at cycle 366298
HALT operation received from [0][7][0] at cycle 366298
Simulation finished, cycleCount = 366299
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 366299
RUN TOP_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 974053
RUN BOTTOM_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 0);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 907730
HALT operation received from [0][1][0] at cycle 907730
HALT operation received from [0][2][0] at cycle 907730
HALT operation received from [0][3][0] at cycle 907730
HALT operation received from [0][4][0] at cycle 907730
HALT operation received from [0][5][0] at cycle 907730
HALT operation received from [0][6][0] at cycle 907730
HALT operation received from [0][7][0] at cycle 907730
Simulation finished, cycleCount = 907731
 -------------------------------------------------------- 
Iteration = 1
Total cycles = 907731
RUN REDUCE
Device: 16 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 395449
HALT operation received from [0][1][0] at cycle 395449
HALT operation received from [0][2][0] at cycle 395449
HALT operation received from [0][3][0] at cycle 395449
HALT operation received from [0][4][0] at cycle 395449
HALT operation received from [0][5][0] at cycle 395449
HALT operation received from [0][6][0] at cycle 395449
HALT operation received from [0][7][0] at cycle 395449
Simulation finished, cycleCount = 395450
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 761749
RUN TOP_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1948106
RUN BOTTOM_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 4);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 2
Total cycles = 1968741
RUN REDUCE
Device: 16 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 395449
HALT operation received from [0][1][0] at cycle 395449
HALT operation received from [0][2][0] at cycle 395449
HALT operation received from [0][3][0] at cycle 395449
HALT operation received from [0][4][0] at cycle 395449
HALT operation received from [0][5][0] at cycle 395449
HALT operation received from [0][6][0] at cycle 395449
HALT operation received from [0][7][0] at cycle 395449
Simulation finished, cycleCount = 395450
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 1157199
RUN TOP_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 2922159
RUN BOTTOM_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 8);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 3
Total cycles = 3029751
RUN REDUCE
Device: 16 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 395449
HALT operation received from [0][1][0] at cycle 395449
HALT operation received from [0][2][0] at cycle 395449
HALT operation received from [0][3][0] at cycle 395449
HALT operation received from [0][4][0] at cycle 395449
HALT operation received from [0][5][0] at cycle 395449
HALT operation received from [0][6][0] at cycle 395449
HALT operation received from [0][7][0] at cycle 395449
Simulation finished, cycleCount = 395450
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 1552649
RUN TOP_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 3896212
RUN BOTTOM_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 12);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 4
Total cycles = 4090761
RUN REDUCE
Device: 16 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 395449
HALT operation received from [0][1][0] at cycle 395449
HALT operation received from [0][2][0] at cycle 395449
HALT operation received from [0][3][0] at cycle 395449
HALT operation received from [0][4][0] at cycle 395449
HALT operation received from [0][5][0] at cycle 395449
HALT operation received from [0][6][0] at cycle 395449
HALT operation received from [0][7][0] at cycle 395449
Simulation finished, cycleCount = 395450
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 1948099
RUN TOP_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 4870265
RUN BOTTOM_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 16);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 5
Total cycles = 5151771
RUN REDUCE
Device: 16 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 395449
HALT operation received from [0][1][0] at cycle 395449
HALT operation received from [0][2][0] at cycle 395449
HALT operation received from [0][3][0] at cycle 395449
HALT operation received from [0][4][0] at cycle 395449
HALT operation received from [0][5][0] at cycle 395449
HALT operation received from [0][6][0] at cycle 395449
HALT operation received from [0][7][0] at cycle 395449
Simulation finished, cycleCount = 395450
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 2343549
RUN TOP_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 5844318
RUN BOTTOM_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 20);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 6
Total cycles = 6212781
RUN REDUCE
Device: 16 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 395449
HALT operation received from [0][1][0] at cycle 395449
HALT operation received from [0][2][0] at cycle 395449
HALT operation received from [0][3][0] at cycle 395449
HALT operation received from [0][4][0] at cycle 395449
HALT operation received from [0][5][0] at cycle 395449
HALT operation received from [0][6][0] at cycle 395449
HALT operation received from [0][7][0] at cycle 395449
Simulation finished, cycleCount = 395450
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 2738999
RUN TOP_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 6818371
RUN BOTTOM_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 24);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 7
Total cycles = 7273791
RUN REDUCE
Device: 16 core 4w4a1m1ls1b
Compiling kernel: reduce

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_3;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    reduce(&BufferArg_0, &BufferArg_1, 2048, (&BufferArg_3 + (__builtin_le1_read_cpuid() * 256)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 25208
Size of bss area : 
End of memory: 201664
Second Pass Completed
Run Simulation with:
  binaries/final_reduce.s.bin  
  binaries/final_reduce.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 13
HALT operation received from [0][9][0] at cycle 13
HALT operation received from [0][10][0] at cycle 13
HALT operation received from [0][11][0] at cycle 13
HALT operation received from [0][12][0] at cycle 13
HALT operation received from [0][13][0] at cycle 13
HALT operation received from [0][14][0] at cycle 13
HALT operation received from [0][15][0] at cycle 13
HALT operation received from [0][0][0] at cycle 395449
HALT operation received from [0][1][0] at cycle 395449
HALT operation received from [0][2][0] at cycle 395449
HALT operation received from [0][3][0] at cycle 395449
HALT operation received from [0][4][0] at cycle 395449
HALT operation received from [0][5][0] at cycle 395449
HALT operation received from [0][6][0] at cycle 395449
HALT operation received from [0][7][0] at cycle 395449
Simulation finished, cycleCount = 395450
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 3134449
RUN TOP_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: top_scan

Dimension 0: Global work size = 256, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_2;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 1;
  int workgroupX = 1;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    top_scan(&BufferArg_0, 8, (&BufferArg_2 + (__builtin_le1_read_cpuid() * 512)));
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 33400
Size of bss area : 
End of memory: 267200
Second Pass Completed
Run Simulation with:
  binaries/final_top_scan.s.bin  
  binaries/final_top_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][1][0] at cycle 14
HALT operation received from [0][2][0] at cycle 14
HALT operation received from [0][3][0] at cycle 14
HALT operation received from [0][4][0] at cycle 14
HALT operation received from [0][5][0] at cycle 14
HALT operation received from [0][6][0] at cycle 14
HALT operation received from [0][7][0] at cycle 14
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 974052
Simulation finished, cycleCount = 974053
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 7792424
RUN BOTTOM_SCAN
Device: 16 core 4w4a1m1ls1b
Compiling kernel: bottom_scan

Dimension 0: Global work size = 2048, Local work size = 256

Kernel launcher function:
extern int BufferArg_0;
extern int BufferArg_1;
extern int BufferArg_2;
extern int BufferArg_4;
int main(void) {
  int id = 0;
  int num_cores = 16;
  int total_workgroups = 8;
  int workgroupX = 8;
  int workgroupY = 0;
  int x = 0;
  int y = 0;
  id = __builtin_le1_read_cpuid();

  while (id < total_workgroups) {
    x = id;
    if (x >= workgroupX) {
      y = x / workgroupX;
      x = x % workgroupX;
    }
    if (y > workgroupY)
      return 0;

    __builtin_le1_set_group_id_1(y);
    __builtin_le1_set_group_id_0(x);
    bottom_scan(&BufferArg_0, &BufferArg_1, &BufferArg_2, 2048, (&BufferArg_4 + (__builtin_le1_read_cpuid() * 512)), 28);
    id += num_cores;
  }
  return id;
}

mem align: 0
dram_base_offset: 0
Size of data area : 49784
Size of bss area : 
End of memory: 398272
Second Pass Completed
Run Simulation with:
  binaries/final_bottom_scan.s.bin  
  binaries/final_bottom_scan.data.bin  
  16Context_4wide.xml
HALT operation received from [0][8][0] at cycle 14
HALT operation received from [0][9][0] at cycle 14
HALT operation received from [0][10][0] at cycle 14
HALT operation received from [0][11][0] at cycle 14
HALT operation received from [0][12][0] at cycle 14
HALT operation received from [0][13][0] at cycle 14
HALT operation received from [0][14][0] at cycle 14
HALT operation received from [0][15][0] at cycle 14
HALT operation received from [0][0][0] at cycle 1061009
HALT operation received from [0][1][0] at cycle 1061009
HALT operation received from [0][2][0] at cycle 1061009
HALT operation received from [0][3][0] at cycle 1061009
HALT operation received from [0][4][0] at cycle 1061009
HALT operation received from [0][5][0] at cycle 1061009
HALT operation received from [0][6][0] at cycle 1061009
HALT operation received from [0][7][0] at cycle 1061009
Simulation finished, cycleCount = 1061010
 -------------------------------------------------------- 
Iteration = 8
Total cycles = 8334801
keys[0] = 0
keys[1] = 0
keys[2] = 0
keys[3] = 0
keys[4] = 0
keys[5] = 0
keys[6] = 0
keys[7] = 0
keys[8] = 0
keys[9] = 0
keys[10] = 0
keys[11] = 0
keys[12] = 0
keys[13] = 0
keys[14] = 0
keys[15] = 0
keys[16] = 0
keys[17] = 0
keys[18] = 0
keys[19] = 0
keys[20] = 0
keys[21] = 0
keys[22] = 0
keys[23] = 0
keys[24] = 0
keys[25] = 0
keys[26] = 0
keys[27] = 0
keys[28] = 0
keys[29] = 0
keys[30] = 0
keys[31] = 0
keys[32] = 0
keys[33] = 0
keys[34] = 0
keys[35] = 0
keys[36] = 0
keys[37] = 0
keys[38] = 0
keys[39] = 0
keys[40] = 0
keys[41] = 0
keys[42] = 0
keys[43] = 0
keys[44] = 0
keys[45] = 0
keys[46] = 0
keys[47] = 0
keys[48] = 0
keys[49] = 0
keys[50] = 0
keys[51] = 0
keys[52] = 0
keys[53] = 0
keys[54] = 0
keys[55] = 0
keys[56] = 0
keys[57] = 0
keys[58] = 0
keys[59] = 0
keys[60] = 0
keys[61] = 0
keys[62] = 0
keys[63] = 0
keys[64] = 0
keys[65] = 0
keys[66] = 0
keys[67] = 0
keys[68] = 0
keys[69] = 0
keys[70] = 0
keys[71] = 0
keys[72] = 0
keys[73] = 0
keys[74] = 0
keys[75] = 0
keys[76] = 0
keys[77] = 0
keys[78] = 0
keys[79] = 0
keys[80] = 0
keys[81] = 0
keys[82] = 0
keys[83] = 0
keys[84] = 0
keys[85] = 0
keys[86] = 0
keys[87] = 0
keys[88] = 0
keys[89] = 0
keys[90] = 0
keys[91] = 0
keys[92] = 0
keys[93] = 0
keys[94] = 0
keys[95] = 0
keys[96] = 0
keys[97] = 0
keys[98] = 0
keys[99] = 0
keys[100] = 0
keys[101] = 0
keys[102] = 0
keys[103] = 0
keys[104] = 0
keys[105] = 0
keys[106] = 0
keys[107] = 0
keys[108] = 0
keys[109] = 0
keys[110] = 0
keys[111] = 0
keys[112] = 0
keys[113] = 0
keys[114] = 0
keys[115] = 0
keys[116] = 0
keys[117] = 0
keys[118] = 0
keys[119] = 0
keys[120] = 0
keys[121] = 0
keys[122] = 0
keys[123] = 0
keys[124] = 0
keys[125] = 0
keys[126] = 0
keys[127] = 0
keys[128] = 1
keys[129] = 1
keys[130] = 1
keys[131] = 1
keys[132] = 1
keys[133] = 1
keys[134] = 1
keys[135] = 1
keys[136] = 1
keys[137] = 1
keys[138] = 1
keys[139] = 1
keys[140] = 1
keys[141] = 1
keys[142] = 1
keys[143] = 1
keys[144] = 1
keys[145] = 1
keys[146] = 1
keys[147] = 1
keys[148] = 1
keys[149] = 1
keys[150] = 1
keys[151] = 1
keys[152] = 1
keys[153] = 1
keys[154] = 1
keys[155] = 1
keys[156] = 1
keys[157] = 1
keys[158] = 1
keys[159] = 1
keys[160] = 1
keys[161] = 1
keys[162] = 1
keys[163] = 1
keys[164] = 1
keys[165] = 1
keys[166] = 1
keys[167] = 1
keys[168] = 1
keys[169] = 1
keys[170] = 1
keys[171] = 1
keys[172] = 1
keys[173] = 1
keys[174] = 1
keys[175] = 1
keys[176] = 1
keys[177] = 1
keys[178] = 1
keys[179] = 1
keys[180] = 1
keys[181] = 1
keys[182] = 1
keys[183] = 1
keys[184] = 1
keys[185] = 1
keys[186] = 1
keys[187] = 1
keys[188] = 1
keys[189] = 1
keys[190] = 1
keys[191] = 1
keys[192] = 1
keys[193] = 1
keys[194] = 1
keys[195] = 1
keys[196] = 1
keys[197] = 1
keys[198] = 1
keys[199] = 1
keys[200] = 1
keys[201] = 1
keys[202] = 1
keys[203] = 1
keys[204] = 1
keys[205] = 1
keys[206] = 1
keys[207] = 1
keys[208] = 1
keys[209] = 1
keys[210] = 1
keys[211] = 1
keys[212] = 1
keys[213] = 1
keys[214] = 1
keys[215] = 1
keys[216] = 1
keys[217] = 1
keys[218] = 1
keys[219] = 1
keys[220] = 1
keys[221] = 1
keys[222] = 1
keys[223] = 1
keys[224] = 1
keys[225] = 1
keys[226] = 1
keys[227] = 1
keys[228] = 1
keys[229] = 1
keys[230] = 1
keys[231] = 1
keys[232] = 1
keys[233] = 1
keys[234] = 1
keys[235] = 1
keys[236] = 1
keys[237] = 1
keys[238] = 1
keys[239] = 1
keys[240] = 1
keys[241] = 1
keys[242] = 1
keys[243] = 1
keys[244] = 1
keys[245] = 1
keys[246] = 1
keys[247] = 1
keys[248] = 1
keys[249] = 1
keys[250] = 1
keys[251] = 1
keys[252] = 1
keys[253] = 1
keys[254] = 1
keys[255] = 1
keys[256] = 2
keys[257] = 2
keys[258] = 2
keys[259] = 2
keys[260] = 2
keys[261] = 2
keys[262] = 2
keys[263] = 2
keys[264] = 2
keys[265] = 2
keys[266] = 2
keys[267] = 2
keys[268] = 2
keys[269] = 2
keys[270] = 2
keys[271] = 2
keys[272] = 2
keys[273] = 2
keys[274] = 2
keys[275] = 2
keys[276] = 2
keys[277] = 2
keys[278] = 2
keys[279] = 2
keys[280] = 2
keys[281] = 2
keys[282] = 2
keys[283] = 2
keys[284] = 2
keys[285] = 2
keys[286] = 2
keys[287] = 2
keys[288] = 2
keys[289] = 2
keys[290] = 2
keys[291] = 2
keys[292] = 2
keys[293] = 2
keys[294] = 2
keys[295] = 2
keys[296] = 2
keys[297] = 2
keys[298] = 2
keys[299] = 2
keys[300] = 2
keys[301] = 2
keys[302] = 2
keys[303] = 2
keys[304] = 2
keys[305] = 2
keys[306] = 2
keys[307] = 2
keys[308] = 2
keys[309] = 2
keys[310] = 2
keys[311] = 2
keys[312] = 2
keys[313] = 2
keys[314] = 2
keys[315] = 2
keys[316] = 2
keys[317] = 2
keys[318] = 2
keys[319] = 2
keys[320] = 2
keys[321] = 2
keys[322] = 2
keys[323] = 2
keys[324] = 2
keys[325] = 2
keys[326] = 2
keys[327] = 2
keys[328] = 2
keys[329] = 2
keys[330] = 2
keys[331] = 2
keys[332] = 2
keys[333] = 2
keys[334] = 2
keys[335] = 2
keys[336] = 2
keys[337] = 2
keys[338] = 2
keys[339] = 2
keys[340] = 2
keys[341] = 2
keys[342] = 2
keys[343] = 2
keys[344] = 2
keys[345] = 2
keys[346] = 2
keys[347] = 2
keys[348] = 2
keys[349] = 2
keys[350] = 2
keys[351] = 2
keys[352] = 2
keys[353] = 2
keys[354] = 2
keys[355] = 2
keys[356] = 2
keys[357] = 2
keys[358] = 2
keys[359] = 2
keys[360] = 2
keys[361] = 2
keys[362] = 2
keys[363] = 2
keys[364] = 2
keys[365] = 2
keys[366] = 2
keys[367] = 2
keys[368] = 2
keys[369] = 2
keys[370] = 2
keys[371] = 2
keys[372] = 2
keys[373] = 2
keys[374] = 2
keys[375] = 2
keys[376] = 2
keys[377] = 2
keys[378] = 2
keys[379] = 2
keys[380] = 2
keys[381] = 2
keys[382] = 2
keys[383] = 2
keys[384] = 3
keys[385] = 3
keys[386] = 3
keys[387] = 3
keys[388] = 3
keys[389] = 3
keys[390] = 3
keys[391] = 3
keys[392] = 3
keys[393] = 3
keys[394] = 3
keys[395] = 3
keys[396] = 3
keys[397] = 3
keys[398] = 3
keys[399] = 3
keys[400] = 3
keys[401] = 3
keys[402] = 3
keys[403] = 3
keys[404] = 3
keys[405] = 3
keys[406] = 3
keys[407] = 3
keys[408] = 3
keys[409] = 3
keys[410] = 3
keys[411] = 3
keys[412] = 3
keys[413] = 3
keys[414] = 3
keys[415] = 3
keys[416] = 3
keys[417] = 3
keys[418] = 3
keys[419] = 3
keys[420] = 3
keys[421] = 3
keys[422] = 3
keys[423] = 3
keys[424] = 3
keys[425] = 3
keys[426] = 3
keys[427] = 3
keys[428] = 3
keys[429] = 3
keys[430] = 3
keys[431] = 3
keys[432] = 3
keys[433] = 3
keys[434] = 3
keys[435] = 3
keys[436] = 3
keys[437] = 3
keys[438] = 3
keys[439] = 3
keys[440] = 3
keys[441] = 3
keys[442] = 3
keys[443] = 3
keys[444] = 3
keys[445] = 3
keys[446] = 3
keys[447] = 3
keys[448] = 3
keys[449] = 3
keys[450] = 3
keys[451] = 3
keys[452] = 3
keys[453] = 3
keys[454] = 3
keys[455] = 3
keys[456] = 3
keys[457] = 3
keys[458] = 3
keys[459] = 3
keys[460] = 3
keys[461] = 3
keys[462] = 3
keys[463] = 3
keys[464] = 3
keys[465] = 3
keys[466] = 3
keys[467] = 3
keys[468] = 3
keys[469] = 3
keys[470] = 3
keys[471] = 3
keys[472] = 3
keys[473] = 3
keys[474] = 3
keys[475] = 3
keys[476] = 3
keys[477] = 3
keys[478] = 3
keys[479] = 3
keys[480] = 3
keys[481] = 3
keys[482] = 3
keys[483] = 3
keys[484] = 3
keys[485] = 3
keys[486] = 3
keys[487] = 3
keys[488] = 3
keys[489] = 3
keys[490] = 3
keys[491] = 3
keys[492] = 3
keys[493] = 3
keys[494] = 3
keys[495] = 3
keys[496] = 3
keys[497] = 3
keys[498] = 3
keys[499] = 3
keys[500] = 3
keys[501] = 3
keys[502] = 3
keys[503] = 3
keys[504] = 3
keys[505] = 3
keys[506] = 3
keys[507] = 3
keys[508] = 3
keys[509] = 3
keys[510] = 3
keys[511] = 3
keys[512] = 4
keys[513] = 4
keys[514] = 4
keys[515] = 4
keys[516] = 4
keys[517] = 4
keys[518] = 4
keys[519] = 4
keys[520] = 4
keys[521] = 4
keys[522] = 4
keys[523] = 4
keys[524] = 4
keys[525] = 4
keys[526] = 4
keys[527] = 4
keys[528] = 4
keys[529] = 4
keys[530] = 4
keys[531] = 4
keys[532] = 4
keys[533] = 4
keys[534] = 4
keys[535] = 4
keys[536] = 4
keys[537] = 4
keys[538] = 4
keys[539] = 4
keys[540] = 4
keys[541] = 4
keys[542] = 4
keys[543] = 4
keys[544] = 4
keys[545] = 4
keys[546] = 4
keys[547] = 4
keys[548] = 4
keys[549] = 4
keys[550] = 4
keys[551] = 4
keys[552] = 4
keys[553] = 4
keys[554] = 4
keys[555] = 4
keys[556] = 4
keys[557] = 4
keys[558] = 4
keys[559] = 4
keys[560] = 4
keys[561] = 4
keys[562] = 4
keys[563] = 4
keys[564] = 4
keys[565] = 4
keys[566] = 4
keys[567] = 4
keys[568] = 4
keys[569] = 4
keys[570] = 4
keys[571] = 4
keys[572] = 4
keys[573] = 4
keys[574] = 4
keys[575] = 4
keys[576] = 4
keys[577] = 4
keys[578] = 4
keys[579] = 4
keys[580] = 4
keys[581] = 4
keys[582] = 4
keys[583] = 4
keys[584] = 4
keys[585] = 4
keys[586] = 4
keys[587] = 4
keys[588] = 4
keys[589] = 4
keys[590] = 4
keys[591] = 4
keys[592] = 4
keys[593] = 4
keys[594] = 4
keys[595] = 4
keys[596] = 4
keys[597] = 4
keys[598] = 4
keys[599] = 4
keys[600] = 4
keys[601] = 4
keys[602] = 4
keys[603] = 4
keys[604] = 4
keys[605] = 4
keys[606] = 4
keys[607] = 4
keys[608] = 4
keys[609] = 4
keys[610] = 4
keys[611] = 4
keys[612] = 4
keys[613] = 4
keys[614] = 4
keys[615] = 4
keys[616] = 4
keys[617] = 4
keys[618] = 4
keys[619] = 4
keys[620] = 4
keys[621] = 4
keys[622] = 4
keys[623] = 4
keys[624] = 4
keys[625] = 4
keys[626] = 4
keys[627] = 4
keys[628] = 4
keys[629] = 4
keys[630] = 4
keys[631] = 4
keys[632] = 4
keys[633] = 4
keys[634] = 4
keys[635] = 4
keys[636] = 4
keys[637] = 4
keys[638] = 4
keys[639] = 4
keys[640] = 5
keys[641] = 5
keys[642] = 5
keys[643] = 5
keys[644] = 5
keys[645] = 5
keys[646] = 5
keys[647] = 5
keys[648] = 5
keys[649] = 5
keys[650] = 5
keys[651] = 5
keys[652] = 5
keys[653] = 5
keys[654] = 5
keys[655] = 5
keys[656] = 5
keys[657] = 5
keys[658] = 5
keys[659] = 5
keys[660] = 5
keys[661] = 5
keys[662] = 5
keys[663] = 5
keys[664] = 5
keys[665] = 5
keys[666] = 5
keys[667] = 5
keys[668] = 5
keys[669] = 5
keys[670] = 5
keys[671] = 5
keys[672] = 5
keys[673] = 5
keys[674] = 5
keys[675] = 5
keys[676] = 5
keys[677] = 5
keys[678] = 5
keys[679] = 5
keys[680] = 5
keys[681] = 5
keys[682] = 5
keys[683] = 5
keys[684] = 5
keys[685] = 5
keys[686] = 5
keys[687] = 5
keys[688] = 5
keys[689] = 5
keys[690] = 5
keys[691] = 5
keys[692] = 5
keys[693] = 5
keys[694] = 5
keys[695] = 5
keys[696] = 5
keys[697] = 5
keys[698] = 5
keys[699] = 5
keys[700] = 5
keys[701] = 5
keys[702] = 5
keys[703] = 5
keys[704] = 5
keys[705] = 5
keys[706] = 5
keys[707] = 5
keys[708] = 5
keys[709] = 5
keys[710] = 5
keys[711] = 5
keys[712] = 5
keys[713] = 5
keys[714] = 5
keys[715] = 5
keys[716] = 5
keys[717] = 5
keys[718] = 5
keys[719] = 5
keys[720] = 5
keys[721] = 5
keys[722] = 5
keys[723] = 5
keys[724] = 5
keys[725] = 5
keys[726] = 5
keys[727] = 5
keys[728] = 5
keys[729] = 5
keys[730] = 5
keys[731] = 5
keys[732] = 5
keys[733] = 5
keys[734] = 5
keys[735] = 5
keys[736] = 5
keys[737] = 5
keys[738] = 5
keys[739] = 5
keys[740] = 5
keys[741] = 5
keys[742] = 5
keys[743] = 5
keys[744] = 5
keys[745] = 5
keys[746] = 5
keys[747] = 5
keys[748] = 5
keys[749] = 5
keys[750] = 5
keys[751] = 5
keys[752] = 5
keys[753] = 5
keys[754] = 5
keys[755] = 5
keys[756] = 5
keys[757] = 5
keys[758] = 5
keys[759] = 5
keys[760] = 5
keys[761] = 5
keys[762] = 5
keys[763] = 5
keys[764] = 5
keys[765] = 5
keys[766] = 5
keys[767] = 5
keys[768] = 6
keys[769] = 6
keys[770] = 6
keys[771] = 6
keys[772] = 6
keys[773] = 6
keys[774] = 6
keys[775] = 6
keys[776] = 6
keys[777] = 6
keys[778] = 6
keys[779] = 6
keys[780] = 6
keys[781] = 6
keys[782] = 6
keys[783] = 6
keys[784] = 6
keys[785] = 6
keys[786] = 6
keys[787] = 6
keys[788] = 6
keys[789] = 6
keys[790] = 6
keys[791] = 6
keys[792] = 6
keys[793] = 6
keys[794] = 6
keys[795] = 6
keys[796] = 6
keys[797] = 6
keys[798] = 6
keys[799] = 6
keys[800] = 6
keys[801] = 6
keys[802] = 6
keys[803] = 6
keys[804] = 6
keys[805] = 6
keys[806] = 6
keys[807] = 6
keys[808] = 6
keys[809] = 6
keys[810] = 6
keys[811] = 6
keys[812] = 6
keys[813] = 6
keys[814] = 6
keys[815] = 6
keys[816] = 6
keys[817] = 6
keys[818] = 6
keys[819] = 6
keys[820] = 6
keys[821] = 6
keys[822] = 6
keys[823] = 6
keys[824] = 6
keys[825] = 6
keys[826] = 6
keys[827] = 6
keys[828] = 6
keys[829] = 6
keys[830] = 6
keys[831] = 6
keys[832] = 6
keys[833] = 6
keys[834] = 6
keys[835] = 6
keys[836] = 6
keys[837] = 6
keys[838] = 6
keys[839] = 6
keys[840] = 6
keys[841] = 6
keys[842] = 6
keys[843] = 6
keys[844] = 6
keys[845] = 6
keys[846] = 6
keys[847] = 6
keys[848] = 6
keys[849] = 6
keys[850] = 6
keys[851] = 6
keys[852] = 6
keys[853] = 6
keys[854] = 6
keys[855] = 6
keys[856] = 6
keys[857] = 6
keys[858] = 6
keys[859] = 6
keys[860] = 6
keys[861] = 6
keys[862] = 6
keys[863] = 6
keys[864] = 6
keys[865] = 6
keys[866] = 6
keys[867] = 6
keys[868] = 6
keys[869] = 6
keys[870] = 6
keys[871] = 6
keys[872] = 6
keys[873] = 6
keys[874] = 6
keys[875] = 6
keys[876] = 6
keys[877] = 6
keys[878] = 6
keys[879] = 6
keys[880] = 6
keys[881] = 6
keys[882] = 6
keys[883] = 6
keys[884] = 6
keys[885] = 6
keys[886] = 6
keys[887] = 6
keys[888] = 6
keys[889] = 6
keys[890] = 6
keys[891] = 6
keys[892] = 6
keys[893] = 6
keys[894] = 6
keys[895] = 6
keys[896] = 7
keys[897] = 7
keys[898] = 7
keys[899] = 7
keys[900] = 7
keys[901] = 7
keys[902] = 7
keys[903] = 7
keys[904] = 7
keys[905] = 7
keys[906] = 7
keys[907] = 7
keys[908] = 7
keys[909] = 7
keys[910] = 7
keys[911] = 7
keys[912] = 7
keys[913] = 7
keys[914] = 7
keys[915] = 7
keys[916] = 7
keys[917] = 7
keys[918] = 7
keys[919] = 7
keys[920] = 7
keys[921] = 7
keys[922] = 7
keys[923] = 7
keys[924] = 7
keys[925] = 7
keys[926] = 7
keys[927] = 7
keys[928] = 7
keys[929] = 7
keys[930] = 7
keys[931] = 7
keys[932] = 7
keys[933] = 7
keys[934] = 7
keys[935] = 7
keys[936] = 7
keys[937] = 7
keys[938] = 7
keys[939] = 7
keys[940] = 7
keys[941] = 7
keys[942] = 7
keys[943] = 7
keys[944] = 7
keys[945] = 7
keys[946] = 7
keys[947] = 7
keys[948] = 7
keys[949] = 7
keys[950] = 7
keys[951] = 7
keys[952] = 7
keys[953] = 7
keys[954] = 7
keys[955] = 7
keys[956] = 7
keys[957] = 7
keys[958] = 7
keys[959] = 7
keys[960] = 7
keys[961] = 7
keys[962] = 7
keys[963] = 7
keys[964] = 7
keys[965] = 7
keys[966] = 7
keys[967] = 7
keys[968] = 7
keys[969] = 7
keys[970] = 7
keys[971] = 7
keys[972] = 7
keys[973] = 7
keys[974] = 7
keys[975] = 7
keys[976] = 7
keys[977] = 7
keys[978] = 7
keys[979] = 7
keys[980] = 7
keys[981] = 7
keys[982] = 7
keys[983] = 7
keys[984] = 7
keys[985] = 7
keys[986] = 7
keys[987] = 7
keys[988] = 7
keys[989] = 7
keys[990] = 7
keys[991] = 7
keys[992] = 7
keys[993] = 7
keys[994] = 7
keys[995] = 7
keys[996] = 7
keys[997] = 7
keys[998] = 7
keys[999] = 7
keys[1000] = 7
keys[1001] = 7
keys[1002] = 7
keys[1003] = 7
keys[1004] = 7
keys[1005] = 7
keys[1006] = 7
keys[1007] = 7
keys[1008] = 7
keys[1009] = 7
keys[1010] = 7
keys[1011] = 7
keys[1012] = 7
keys[1013] = 7
keys[1014] = 7
keys[1015] = 7
keys[1016] = 7
keys[1017] = 7
keys[1018] = 7
keys[1019] = 7
keys[1020] = 7
keys[1021] = 7
keys[1022] = 7
keys[1023] = 7
keys[1024] = 8
keys[1025] = 8
keys[1026] = 8
keys[1027] = 8
keys[1028] = 8
keys[1029] = 8
keys[1030] = 8
keys[1031] = 8
keys[1032] = 8
keys[1033] = 8
keys[1034] = 8
keys[1035] = 8
keys[1036] = 8
keys[1037] = 8
keys[1038] = 8
keys[1039] = 8
keys[1040] = 8
keys[1041] = 8
keys[1042] = 8
keys[1043] = 8
keys[1044] = 8
keys[1045] = 8
keys[1046] = 8
keys[1047] = 8
keys[1048] = 8
keys[1049] = 8
keys[1050] = 8
keys[1051] = 8
keys[1052] = 8
keys[1053] = 8
keys[1054] = 8
keys[1055] = 8
keys[1056] = 8
keys[1057] = 8
keys[1058] = 8
keys[1059] = 8
keys[1060] = 8
keys[1061] = 8
keys[1062] = 8
keys[1063] = 8
keys[1064] = 8
keys[1065] = 8
keys[1066] = 8
keys[1067] = 8
keys[1068] = 8
keys[1069] = 8
keys[1070] = 8
keys[1071] = 8
keys[1072] = 8
keys[1073] = 8
keys[1074] = 8
keys[1075] = 8
keys[1076] = 8
keys[1077] = 8
keys[1078] = 8
keys[1079] = 8
keys[1080] = 8
keys[1081] = 8
keys[1082] = 8
keys[1083] = 8
keys[1084] = 8
keys[1085] = 8
keys[1086] = 8
keys[1087] = 8
keys[1088] = 8
keys[1089] = 8
keys[1090] = 8
keys[1091] = 8
keys[1092] = 8
keys[1093] = 8
keys[1094] = 8
keys[1095] = 8
keys[1096] = 8
keys[1097] = 8
keys[1098] = 8
keys[1099] = 8
keys[1100] = 8
keys[1101] = 8
keys[1102] = 8
keys[1103] = 8
keys[1104] = 8
keys[1105] = 8
keys[1106] = 8
keys[1107] = 8
keys[1108] = 8
keys[1109] = 8
keys[1110] = 8
keys[1111] = 8
keys[1112] = 8
keys[1113] = 8
keys[1114] = 8
keys[1115] = 8
keys[1116] = 8
keys[1117] = 8
keys[1118] = 8
keys[1119] = 8
keys[1120] = 8
keys[1121] = 8
keys[1122] = 8
keys[1123] = 8
keys[1124] = 8
keys[1125] = 8
keys[1126] = 8
keys[1127] = 8
keys[1128] = 8
keys[1129] = 8
keys[1130] = 8
keys[1131] = 8
keys[1132] = 8
keys[1133] = 8
keys[1134] = 8
keys[1135] = 8
keys[1136] = 8
keys[1137] = 8
keys[1138] = 8
keys[1139] = 8
keys[1140] = 8
keys[1141] = 8
keys[1142] = 8
keys[1143] = 8
keys[1144] = 8
keys[1145] = 8
keys[1146] = 8
keys[1147] = 8
keys[1148] = 8
keys[1149] = 8
keys[1150] = 8
keys[1151] = 8
keys[1152] = 9
keys[1153] = 9
keys[1154] = 9
keys[1155] = 9
keys[1156] = 9
keys[1157] = 9
keys[1158] = 9
keys[1159] = 9
keys[1160] = 9
keys[1161] = 9
keys[1162] = 9
keys[1163] = 9
keys[1164] = 9
keys[1165] = 9
keys[1166] = 9
keys[1167] = 9
keys[1168] = 9
keys[1169] = 9
keys[1170] = 9
keys[1171] = 9
keys[1172] = 9
keys[1173] = 9
keys[1174] = 9
keys[1175] = 9
keys[1176] = 9
keys[1177] = 9
keys[1178] = 9
keys[1179] = 9
keys[1180] = 9
keys[1181] = 9
keys[1182] = 9
keys[1183] = 9
keys[1184] = 9
keys[1185] = 9
keys[1186] = 9
keys[1187] = 9
keys[1188] = 9
keys[1189] = 9
keys[1190] = 9
keys[1191] = 9
keys[1192] = 9
keys[1193] = 9
keys[1194] = 9
keys[1195] = 9
keys[1196] = 9
keys[1197] = 9
keys[1198] = 9
keys[1199] = 9
keys[1200] = 9
keys[1201] = 9
keys[1202] = 9
keys[1203] = 9
keys[1204] = 9
keys[1205] = 9
keys[1206] = 9
keys[1207] = 9
keys[1208] = 9
keys[1209] = 9
keys[1210] = 9
keys[1211] = 9
keys[1212] = 9
keys[1213] = 9
keys[1214] = 9
keys[1215] = 9
keys[1216] = 9
keys[1217] = 9
keys[1218] = 9
keys[1219] = 9
keys[1220] = 9
keys[1221] = 9
keys[1222] = 9
keys[1223] = 9
keys[1224] = 9
keys[1225] = 9
keys[1226] = 9
keys[1227] = 9
keys[1228] = 9
keys[1229] = 9
keys[1230] = 9
keys[1231] = 9
keys[1232] = 9
keys[1233] = 9
keys[1234] = 9
keys[1235] = 9
keys[1236] = 9
keys[1237] = 9
keys[1238] = 9
keys[1239] = 9
keys[1240] = 9
keys[1241] = 9
keys[1242] = 9
keys[1243] = 9
keys[1244] = 9
keys[1245] = 9
keys[1246] = 9
keys[1247] = 9
keys[1248] = 9
keys[1249] = 9
keys[1250] = 9
keys[1251] = 9
keys[1252] = 9
keys[1253] = 9
keys[1254] = 9
keys[1255] = 9
keys[1256] = 9
keys[1257] = 9
keys[1258] = 9
keys[1259] = 9
keys[1260] = 9
keys[1261] = 9
keys[1262] = 9
keys[1263] = 9
keys[1264] = 9
keys[1265] = 9
keys[1266] = 9
keys[1267] = 9
keys[1268] = 9
keys[1269] = 9
keys[1270] = 9
keys[1271] = 9
keys[1272] = 9
keys[1273] = 9
keys[1274] = 9
keys[1275] = 9
keys[1276] = 9
keys[1277] = 9
keys[1278] = 9
keys[1279] = 9
keys[1280] = 10
keys[1281] = 10
keys[1282] = 10
keys[1283] = 10
keys[1284] = 10
keys[1285] = 10
keys[1286] = 10
keys[1287] = 10
keys[1288] = 10
keys[1289] = 10
keys[1290] = 10
keys[1291] = 10
keys[1292] = 10
keys[1293] = 10
keys[1294] = 10
keys[1295] = 10
keys[1296] = 10
keys[1297] = 10
keys[1298] = 10
keys[1299] = 10
keys[1300] = 10
keys[1301] = 10
keys[1302] = 10
keys[1303] = 10
keys[1304] = 10
keys[1305] = 10
keys[1306] = 10
keys[1307] = 10
keys[1308] = 10
keys[1309] = 10
keys[1310] = 10
keys[1311] = 10
keys[1312] = 10
keys[1313] = 10
keys[1314] = 10
keys[1315] = 10
keys[1316] = 10
keys[1317] = 10
keys[1318] = 10
keys[1319] = 10
keys[1320] = 10
keys[1321] = 10
keys[1322] = 10
keys[1323] = 10
keys[1324] = 10
keys[1325] = 10
keys[1326] = 10
keys[1327] = 10
keys[1328] = 10
keys[1329] = 10
keys[1330] = 10
keys[1331] = 10
keys[1332] = 10
keys[1333] = 10
keys[1334] = 10
keys[1335] = 10
keys[1336] = 10
keys[1337] = 10
keys[1338] = 10
keys[1339] = 10
keys[1340] = 10
keys[1341] = 10
keys[1342] = 10
keys[1343] = 10
keys[1344] = 10
keys[1345] = 10
keys[1346] = 10
keys[1347] = 10
keys[1348] = 10
keys[1349] = 10
keys[1350] = 10
keys[1351] = 10
keys[1352] = 10
keys[1353] = 10
keys[1354] = 10
keys[1355] = 10
keys[1356] = 10
keys[1357] = 10
keys[1358] = 10
keys[1359] = 10
keys[1360] = 10
keys[1361] = 10
keys[1362] = 10
keys[1363] = 10
keys[1364] = 10
keys[1365] = 10
keys[1366] = 10
keys[1367] = 10
keys[1368] = 10
keys[1369] = 10
keys[1370] = 10
keys[1371] = 10
keys[1372] = 10
keys[1373] = 10
keys[1374] = 10
keys[1375] = 10
keys[1376] = 10
keys[1377] = 10
keys[1378] = 10
keys[1379] = 10
keys[1380] = 10
keys[1381] = 10
keys[1382] = 10
keys[1383] = 10
keys[1384] = 10
keys[1385] = 10
keys[1386] = 10
keys[1387] = 10
keys[1388] = 10
keys[1389] = 10
keys[1390] = 10
keys[1391] = 10
keys[1392] = 10
keys[1393] = 10
keys[1394] = 10
keys[1395] = 10
keys[1396] = 10
keys[1397] = 10
keys[1398] = 10
keys[1399] = 10
keys[1400] = 10
keys[1401] = 10
keys[1402] = 10
keys[1403] = 10
keys[1404] = 10
keys[1405] = 10
keys[1406] = 10
keys[1407] = 10
keys[1408] = 11
keys[1409] = 11
keys[1410] = 11
keys[1411] = 11
keys[1412] = 11
keys[1413] = 11
keys[1414] = 11
keys[1415] = 11
keys[1416] = 11
keys[1417] = 11
keys[1418] = 11
keys[1419] = 11
keys[1420] = 11
keys[1421] = 11
keys[1422] = 11
keys[1423] = 11
keys[1424] = 11
keys[1425] = 11
keys[1426] = 11
keys[1427] = 11
keys[1428] = 11
keys[1429] = 11
keys[1430] = 11
keys[1431] = 11
keys[1432] = 11
keys[1433] = 11
keys[1434] = 11
keys[1435] = 11
keys[1436] = 11
keys[1437] = 11
keys[1438] = 11
keys[1439] = 11
keys[1440] = 11
keys[1441] = 11
keys[1442] = 11
keys[1443] = 11
keys[1444] = 11
keys[1445] = 11
keys[1446] = 11
keys[1447] = 11
keys[1448] = 11
keys[1449] = 11
keys[1450] = 11
keys[1451] = 11
keys[1452] = 11
keys[1453] = 11
keys[1454] = 11
keys[1455] = 11
keys[1456] = 11
keys[1457] = 11
keys[1458] = 11
keys[1459] = 11
keys[1460] = 11
keys[1461] = 11
keys[1462] = 11
keys[1463] = 11
keys[1464] = 11
keys[1465] = 11
keys[1466] = 11
keys[1467] = 11
keys[1468] = 11
keys[1469] = 11
keys[1470] = 11
keys[1471] = 11
keys[1472] = 11
keys[1473] = 11
keys[1474] = 11
keys[1475] = 11
keys[1476] = 11
keys[1477] = 11
keys[1478] = 11
keys[1479] = 11
keys[1480] = 11
keys[1481] = 11
keys[1482] = 11
keys[1483] = 11
keys[1484] = 11
keys[1485] = 11
keys[1486] = 11
keys[1487] = 11
keys[1488] = 11
keys[1489] = 11
keys[1490] = 11
keys[1491] = 11
keys[1492] = 11
keys[1493] = 11
keys[1494] = 11
keys[1495] = 11
keys[1496] = 11
keys[1497] = 11
keys[1498] = 11
keys[1499] = 11
keys[1500] = 11
keys[1501] = 11
keys[1502] = 11
keys[1503] = 11
keys[1504] = 11
keys[1505] = 11
keys[1506] = 11
keys[1507] = 11
keys[1508] = 11
keys[1509] = 11
keys[1510] = 11
keys[1511] = 11
keys[1512] = 11
keys[1513] = 11
keys[1514] = 11
keys[1515] = 11
keys[1516] = 11
keys[1517] = 11
keys[1518] = 11
keys[1519] = 11
keys[1520] = 11
keys[1521] = 11
keys[1522] = 11
keys[1523] = 11
keys[1524] = 11
keys[1525] = 11
keys[1526] = 11
keys[1527] = 11
keys[1528] = 11
keys[1529] = 11
keys[1530] = 11
keys[1531] = 11
keys[1532] = 11
keys[1533] = 11
keys[1534] = 11
keys[1535] = 11
keys[1536] = 12
keys[1537] = 12
keys[1538] = 12
keys[1539] = 12
keys[1540] = 12
keys[1541] = 12
keys[1542] = 12
keys[1543] = 12
keys[1544] = 12
keys[1545] = 12
keys[1546] = 12
keys[1547] = 12
keys[1548] = 12
keys[1549] = 12
keys[1550] = 12
keys[1551] = 12
keys[1552] = 12
keys[1553] = 12
keys[1554] = 12
keys[1555] = 12
keys[1556] = 12
keys[1557] = 12
keys[1558] = 12
keys[1559] = 12
keys[1560] = 12
keys[1561] = 12
keys[1562] = 12
keys[1563] = 12
keys[1564] = 12
keys[1565] = 12
keys[1566] = 12
keys[1567] = 12
keys[1568] = 12
keys[1569] = 12
keys[1570] = 12
keys[1571] = 12
keys[1572] = 12
keys[1573] = 12
keys[1574] = 12
keys[1575] = 12
keys[1576] = 12
keys[1577] = 12
keys[1578] = 12
keys[1579] = 12
keys[1580] = 12
keys[1581] = 12
keys[1582] = 12
keys[1583] = 12
keys[1584] = 12
keys[1585] = 12
keys[1586] = 12
keys[1587] = 12
keys[1588] = 12
keys[1589] = 12
keys[1590] = 12
keys[1591] = 12
keys[1592] = 12
keys[1593] = 12
keys[1594] = 12
keys[1595] = 12
keys[1596] = 12
keys[1597] = 12
keys[1598] = 12
keys[1599] = 12
keys[1600] = 12
keys[1601] = 12
keys[1602] = 12
keys[1603] = 12
keys[1604] = 12
keys[1605] = 12
keys[1606] = 12
keys[1607] = 12
keys[1608] = 12
keys[1609] = 12
keys[1610] = 12
keys[1611] = 12
keys[1612] = 12
keys[1613] = 12
keys[1614] = 12
keys[1615] = 12
keys[1616] = 12
keys[1617] = 12
keys[1618] = 12
keys[1619] = 12
keys[1620] = 12
keys[1621] = 12
keys[1622] = 12
keys[1623] = 12
keys[1624] = 12
keys[1625] = 12
keys[1626] = 12
keys[1627] = 12
keys[1628] = 12
keys[1629] = 12
keys[1630] = 12
keys[1631] = 12
keys[1632] = 12
keys[1633] = 12
keys[1634] = 12
keys[1635] = 12
keys[1636] = 12
keys[1637] = 12
keys[1638] = 12
keys[1639] = 12
keys[1640] = 12
keys[1641] = 12
keys[1642] = 12
keys[1643] = 12
keys[1644] = 12
keys[1645] = 12
keys[1646] = 12
keys[1647] = 12
keys[1648] = 12
keys[1649] = 12
keys[1650] = 12
keys[1651] = 12
keys[1652] = 12
keys[1653] = 12
keys[1654] = 12
keys[1655] = 12
keys[1656] = 12
keys[1657] = 12
keys[1658] = 12
keys[1659] = 12
keys[1660] = 12
keys[1661] = 12
keys[1662] = 12
keys[1663] = 12
keys[1664] = 13
keys[1665] = 13
keys[1666] = 13
keys[1667] = 13
keys[1668] = 13
keys[1669] = 13
keys[1670] = 13
keys[1671] = 13
keys[1672] = 13
keys[1673] = 13
keys[1674] = 13
keys[1675] = 13
keys[1676] = 13
keys[1677] = 13
keys[1678] = 13
keys[1679] = 13
keys[1680] = 13
keys[1681] = 13
keys[1682] = 13
keys[1683] = 13
keys[1684] = 13
keys[1685] = 13
keys[1686] = 13
keys[1687] = 13
keys[1688] = 13
keys[1689] = 13
keys[1690] = 13
keys[1691] = 13
keys[1692] = 13
keys[1693] = 13
keys[1694] = 13
keys[1695] = 13
keys[1696] = 13
keys[1697] = 13
keys[1698] = 13
keys[1699] = 13
keys[1700] = 13
keys[1701] = 13
keys[1702] = 13
keys[1703] = 13
keys[1704] = 13
keys[1705] = 13
keys[1706] = 13
keys[1707] = 13
keys[1708] = 13
keys[1709] = 13
keys[1710] = 13
keys[1711] = 13
keys[1712] = 13
keys[1713] = 13
keys[1714] = 13
keys[1715] = 13
keys[1716] = 13
keys[1717] = 13
keys[1718] = 13
keys[1719] = 13
keys[1720] = 13
keys[1721] = 13
keys[1722] = 13
keys[1723] = 13
keys[1724] = 13
keys[1725] = 13
keys[1726] = 13
keys[1727] = 13
keys[1728] = 13
keys[1729] = 13
keys[1730] = 13
keys[1731] = 13
keys[1732] = 13
keys[1733] = 13
keys[1734] = 13
keys[1735] = 13
keys[1736] = 13
keys[1737] = 13
keys[1738] = 13
keys[1739] = 13
keys[1740] = 13
keys[1741] = 13
keys[1742] = 13
keys[1743] = 13
keys[1744] = 13
keys[1745] = 13
keys[1746] = 13
keys[1747] = 13
keys[1748] = 13
keys[1749] = 13
keys[1750] = 13
keys[1751] = 13
keys[1752] = 13
keys[1753] = 13
keys[1754] = 13
keys[1755] = 13
keys[1756] = 13
keys[1757] = 13
keys[1758] = 13
keys[1759] = 13
keys[1760] = 13
keys[1761] = 13
keys[1762] = 13
keys[1763] = 13
keys[1764] = 13
keys[1765] = 13
keys[1766] = 13
keys[1767] = 13
keys[1768] = 13
keys[1769] = 13
keys[1770] = 13
keys[1771] = 13
keys[1772] = 13
keys[1773] = 13
keys[1774] = 13
keys[1775] = 13
keys[1776] = 13
keys[1777] = 13
keys[1778] = 13
keys[1779] = 13
keys[1780] = 13
keys[1781] = 13
keys[1782] = 13
keys[1783] = 13
keys[1784] = 13
keys[1785] = 13
keys[1786] = 13
keys[1787] = 13
keys[1788] = 13
keys[1789] = 13
keys[1790] = 13
keys[1791] = 13
keys[1792] = 14
keys[1793] = 14
keys[1794] = 14
keys[1795] = 14
keys[1796] = 14
keys[1797] = 14
keys[1798] = 14
keys[1799] = 14
keys[1800] = 14
keys[1801] = 14
keys[1802] = 14
keys[1803] = 14
keys[1804] = 14
keys[1805] = 14
keys[1806] = 14
keys[1807] = 14
keys[1808] = 14
keys[1809] = 14
keys[1810] = 14
keys[1811] = 14
keys[1812] = 14
keys[1813] = 14
keys[1814] = 14
keys[1815] = 14
keys[1816] = 14
keys[1817] = 14
keys[1818] = 14
keys[1819] = 14
keys[1820] = 14
keys[1821] = 14
keys[1822] = 14
keys[1823] = 14
keys[1824] = 14
keys[1825] = 14
keys[1826] = 14
keys[1827] = 14
keys[1828] = 14
keys[1829] = 14
keys[1830] = 14
keys[1831] = 14
keys[1832] = 14
keys[1833] = 14
keys[1834] = 14
keys[1835] = 14
keys[1836] = 14
keys[1837] = 14
keys[1838] = 14
keys[1839] = 14
keys[1840] = 14
keys[1841] = 14
keys[1842] = 14
keys[1843] = 14
keys[1844] = 14
keys[1845] = 14
keys[1846] = 14
keys[1847] = 14
keys[1848] = 14
keys[1849] = 14
keys[1850] = 14
keys[1851] = 14
keys[1852] = 14
keys[1853] = 14
keys[1854] = 14
keys[1855] = 14
keys[1856] = 14
keys[1857] = 14
keys[1858] = 14
keys[1859] = 14
keys[1860] = 14
keys[1861] = 14
keys[1862] = 14
keys[1863] = 14
keys[1864] = 14
keys[1865] = 14
keys[1866] = 14
keys[1867] = 14
keys[1868] = 14
keys[1869] = 14
keys[1870] = 14
keys[1871] = 14
keys[1872] = 14
keys[1873] = 14
keys[1874] = 14
keys[1875] = 14
keys[1876] = 14
keys[1877] = 14
keys[1878] = 14
keys[1879] = 14
keys[1880] = 14
keys[1881] = 14
keys[1882] = 14
keys[1883] = 14
keys[1884] = 14
keys[1885] = 14
keys[1886] = 14
keys[1887] = 14
keys[1888] = 14
keys[1889] = 14
keys[1890] = 14
keys[1891] = 14
keys[1892] = 14
keys[1893] = 14
keys[1894] = 14
keys[1895] = 14
keys[1896] = 14
keys[1897] = 14
keys[1898] = 14
keys[1899] = 14
keys[1900] = 14
keys[1901] = 14
keys[1902] = 14
keys[1903] = 14
keys[1904] = 14
keys[1905] = 14
keys[1906] = 14
keys[1907] = 14
keys[1908] = 14
keys[1909] = 14
keys[1910] = 14
keys[1911] = 14
keys[1912] = 14
keys[1913] = 14
keys[1914] = 14
keys[1915] = 14
keys[1916] = 14
keys[1917] = 14
keys[1918] = 14
keys[1919] = 14
keys[1920] = 15
keys[1921] = 15
keys[1922] = 15
keys[1923] = 15
keys[1924] = 15
keys[1925] = 15
keys[1926] = 15
keys[1927] = 15
keys[1928] = 15
keys[1929] = 15
keys[1930] = 15
keys[1931] = 15
keys[1932] = 15
keys[1933] = 15
keys[1934] = 15
keys[1935] = 15
keys[1936] = 15
keys[1937] = 15
keys[1938] = 15
keys[1939] = 15
keys[1940] = 15
keys[1941] = 15
keys[1942] = 15
keys[1943] = 15
keys[1944] = 15
keys[1945] = 15
keys[1946] = 15
keys[1947] = 15
keys[1948] = 15
keys[1949] = 15
keys[1950] = 15
keys[1951] = 15
keys[1952] = 15
keys[1953] = 15
keys[1954] = 15
keys[1955] = 15
keys[1956] = 15
keys[1957] = 15
keys[1958] = 15
keys[1959] = 15
keys[1960] = 15
keys[1961] = 15
keys[1962] = 15
keys[1963] = 15
keys[1964] = 15
keys[1965] = 15
keys[1966] = 15
keys[1967] = 15
keys[1968] = 15
keys[1969] = 15
keys[1970] = 15
keys[1971] = 15
keys[1972] = 15
keys[1973] = 15
keys[1974] = 15
keys[1975] = 15
keys[1976] = 15
keys[1977] = 15
keys[1978] = 15
keys[1979] = 15
keys[1980] = 15
keys[1981] = 15
keys[1982] = 15
keys[1983] = 15
keys[1984] = 15
keys[1985] = 15
keys[1986] = 15
keys[1987] = 15
keys[1988] = 15
keys[1989] = 15
keys[1990] = 15
keys[1991] = 15
keys[1992] = 15
keys[1993] = 15
keys[1994] = 15
keys[1995] = 15
keys[1996] = 15
keys[1997] = 15
keys[1998] = 15
keys[1999] = 15
keys[2000] = 15
keys[2001] = 15
keys[2002] = 15
keys[2003] = 15
keys[2004] = 15
keys[2005] = 15
keys[2006] = 15
keys[2007] = 15
keys[2008] = 15
keys[2009] = 15
keys[2010] = 15
keys[2011] = 15
keys[2012] = 15
keys[2013] = 15
keys[2014] = 15
keys[2015] = 15
keys[2016] = 15
keys[2017] = 15
keys[2018] = 15
keys[2019] = 15
keys[2020] = 15
keys[2021] = 15
keys[2022] = 15
keys[2023] = 15
keys[2024] = 15
keys[2025] = 15
keys[2026] = 15
keys[2027] = 15
keys[2028] = 15
keys[2029] = 15
keys[2030] = 15
keys[2031] = 15
keys[2032] = 15
keys[2033] = 15
keys[2034] = 15
keys[2035] = 15
keys[2036] = 15
keys[2037] = 15
keys[2038] = 15
keys[2039] = 15
keys[2040] = 15
keys[2041] = 15
keys[2042] = 15
keys[2043] = 15
keys[2044] = 15
keys[2045] = 15
keys[2046] = 15
Test Passed
