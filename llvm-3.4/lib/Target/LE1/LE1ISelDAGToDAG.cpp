//===-- LE1ISelDAGToDAG.cpp - A dag to dag inst selector for LE1 --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the LE1 target.
//
//===----------------------------------------------------------------------===//

#define DEBUG_TYPE "le1-isel"
#include "LE1.h"
#include "LE1MachineFunction.h"
#include "LE1RegisterInfo.h"
#include "LE1Subtarget.h"
#include "LE1TargetMachine.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/GlobalValue.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/Type.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Support/CFG.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

#include <iostream>

using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// LE1DAGToDAGISel - LE1 specific code to select LE1 machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace {

class LE1DAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the LE1Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const LE1Subtarget &Subtarget;

  /// TM - Keep a reference to LE1TargetMachine.
  LE1TargetMachine &TM;
  const LE1InstrInfo *TII;

public:
  explicit LE1DAGToDAGISel(LE1TargetMachine &tm) :
  SelectionDAGISel(tm),
  Subtarget(tm.getSubtarget<LE1Subtarget>()),
  TM(tm),
  TII(static_cast<const LE1InstrInfo*>(TM.getInstrInfo())) {
  }

  // Pass Name
  virtual const char *getPassName() const {
    return "LE1 DAG->DAG Pattern Instruction Selection";
  }


private:
  // Include the pieces autogenerated from the target description.
  #include "LE1GenDAGISel.inc"

  /// getTargetMachine - Return a reference to the TargetMachine, casted
  /// to the target-specific type.
  const LE1TargetMachine &getTargetMachine() {
    return static_cast<const LE1TargetMachine &>(TM);
  }

  /// getInstrInfo - Return a reference to the TargetInstrInfo, casted
  /// to the target-specific type.
  const LE1InstrInfo *getInstrInfo() {
    return getTargetMachine().getInstrInfo();
  }

  //SDNode *getGlobalBaseReg();
  SDNode *Select(SDNode *N);
  SDNode *SelectExtLoad(SDNode *N);
  SDNode *SelectLoad(SDNode *N);
  SDNode *SelectStore(SDNode *N);

  // Complex Pattern.
  bool SelectAddr(SDValue N, SDValue &Base, SDValue &Offset);

  // getI32Imm - Return a target constant with the specified
  // value, of type i32.
  inline SDValue getI32Imm(unsigned Imm) {
    return CurDAG->getTargetConstant(Imm, MVT::i32);
  }

  virtual bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                            char ConstraintCode,
                                            std::vector<SDValue> &OutOps);
};

}

/// ComplexPattern used on LE1InstrInfo
/// Used on LE1 Load/Store instructions
bool LE1DAGToDAGISel::
SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset) {
  //std::cout << "Addr belongs to " << Addr.getNode()->getOperationName() << "\n";
  EVT ValTy = Addr.getValueType();
  //unsigned RReg;
  
  // if Address is FI, get the TargetFrameIndex.
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base   = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
    Offset = CurDAG->getTargetConstant(0, ValTy);
    //std::cout << "Address is FI\n";
    return true;
  }

    if ((Addr.getOpcode() == ISD::TargetExternalSymbol ||
        Addr.getOpcode() == ISD::TargetGlobalAddress)) {
      //std::cout << "Addr is TargetGlobal\n";
      return false;
    }

  // Addresses of the form FI+const or FI|const
  if (CurDAG->isBaseWithConstantOffset(Addr)) {
    ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1));
    if (isInt<16>(CN->getSExtValue())) {

      // If the first operand is a FI, get the TargetFI Node
      if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>
                                  (Addr.getOperand(0)))
        Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
      else
        Base = Addr.getOperand(0);

      Offset = CurDAG->getTargetConstant(CN->getZExtValue(), ValTy);

      //RReg = CurDAG->getRegister(LE1::ZERO, MVT::i32);
      //std::cout << "Addr is FI + const\n";
      return true;
    }
  }

  Base   = Addr;
  Offset = CurDAG->getTargetConstant(0, ValTy);
  //std::cout << "Leaving SelectAddr through bottom\n";
  return true;
}

/// Select instructions not customized! Used for
/// expanded, promoted and normal instructions
SDNode* LE1DAGToDAGISel::Select(SDNode *Node) {

  unsigned Opcode = Node->getOpcode();
  SDLoc dl(Node);

  // Dump information about the Node being selected
  DEBUG(dbgs() << "Selecting: "; Node->dump(CurDAG); << "\n");

  switch(Opcode) {
    // FIXME ADDE should take a valid carry flag. This is an expanded op
    // in TargetLowering, should try to make it custom
  case ISD::ADDE: {
    // Lower ADDC to ADDCG but with zero moved in BReg
    SDValue InFlag = Node->getOperand(2);
    SDValue CmpLHS = Node->getOperand(0);
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    EVT VT = LHS.getValueType();

    SDNode *Carry = CurDAG->getMachineNode(LE1::CMPLTU, dl, VT,
                                           CmpLHS, InFlag.getOperand(1));
    SDNode *AddCarry = CurDAG->getMachineNode(LE1::ADD, dl, VT,
                                              SDValue(Carry,0), RHS);
    return CurDAG->SelectNodeTo(Node, LE1::ADD, VT, MVT::Glue,
                                LHS, SDValue(AddCarry,0));
    break;
  }/*
  case ISD::EXTLOAD:
  case ISD::SEXTLOAD:
  case ISD::ZEXTLOAD: {
    std::cout << "Extend load\n";
    unsigned NumOperands = Node->getNumOperands();
    std::cout << "NumOperands = " << NumOperands << std::endl;
    if(NumOperands > 0)
      if(Node->getOperand(1).getNode()->getOpcode() == LE1ISD::TargetGlobal)
        return SelectExtLoad(Node);
    //SDNode *Target = Node->getOperand(1).getNode();
    //if(Target->getOpcode() == LE1ISD::TargetGlobal)
      //std::cout << "TargetGlobal\n";
    break;
  }*/
  case ISD::LOAD: {
  //case ISD::EXTLOAD:
  //case ISD::SEXTLOAD:
  //case ISD::ZEXTLOAD:{
    SDNode *Target = Node->getOperand(1).getNode();
    if(//Target->getOpcode() == LE1ISD::TargetGlobalConst ||
       Target->getOpcode() == LE1ISD::TargetGlobal)
      return SelectLoad(Node);
    break;
  }
  case ISD::STORE: {
    SDNode *Target = Node->getOperand(2).getNode();
    if(//Target->getOpcode() == LE1ISD::TargetGlobalConst ||
       Target->getOpcode() == LE1ISD::TargetGlobal)
      return SelectStore(Node);
    break;
  }/*
  case LE1ISD::LoadGlobalU8: {
      SDValue TargetAddr = Node->getOperand(1);
    SDValue TargetOffset = Node->getOperand(2);
    SDValue Chain = Node->getOperand(3);
  return CurDAG->getMachineNode(LE1::LDBu_G, dl, MVT::i8, MVT::Other,
                                  TargetAddr, TargetOffset, Chain);
    break;
  }
  case LE1ISD::LoadGlobalU16: {
     SDValue TargetAddr = Node->getOperand(1);
    SDValue TargetOffset = Node->getOperand(2);
    SDValue Chain = Node->getOperand(3);
   return CurDAG->getMachineNode(LE1::LDHu_G, dl, MVT::i16, MVT::Other,
                                  TargetAddr, TargetOffset, Chain);
    break;
  }
  case LE1ISD::LoadGlobalS8: {
     SDValue TargetAddr = Node->getOperand(1);
    SDValue TargetOffset = Node->getOperand(2);
    SDValue Chain = Node->getOperand(3);
   return CurDAG->getMachineNode(LE1::LDB_G, dl, MVT::i8, MVT::Other,
                                  TargetAddr, TargetOffset, Chain);
    break;
  }
  case LE1ISD::LoadGlobalS16: {
    SDValue TargetAddr = Node->getOperand(1);
    SDValue TargetOffset = Node->getOperand(2);
    SDValue Chain = Node->getOperand(3);
    return CurDAG->getMachineNode(LE1::LDH_G, dl, MVT::i16, MVT::Other,
                                  TargetAddr, TargetOffset, Chain);
    break;
  }*/
  //case LE1ISD::Call:
    //if(!Node->getOperand(1).isGlobal()) {
      //SDValue LoadLink = CurDAG->getMachineNode(LE1::LDW, dl, MVT::i32,
 /* 
  case ISD::MULHS: {
  //case ISD::MULHU: {
    // FIXME is this ok for both signed and unsigned?
    //SDValue LHS = Node->getOperand(0);
    //SDValue RHS = Node->getOperand(1);
    SDValue MulOp1 = Node->getOperand(0);
    SDValue MulOp2 = Node->getOperand(1);

    SDValue ShiftImm = CurDAG->getTargetConstant(16, MVT::i32);

    SDValue LLVal = SDValue(CurDAG->getMachineNode(LE1::MULLLU, dl, MVT::i32, 
                                                   MulOp1, MulOp2), 0);
    SDValue LHVal = SDValue(CurDAG->getMachineNode(LE1::MULLHU, dl, MVT::i32, 
                                                   MulOp2, MulOp1), 0);
    SDValue HLVal = SDValue(CurDAG->getMachineNode(LE1::MULLHU, dl, MVT::i32, 
                                                   MulOp1, MulOp2), 0);
    SDValue Im1Val =  SDValue(CurDAG->getMachineNode(LE1::ADD, dl, MVT::i32, 
                                                     LHVal, HLVal), 0);
    SDValue Im2Val = SDValue(CurDAG->getMachineNode(LE1::SHR, dl, MVT::i32, 
                                                    LLVal, ShiftImm), 0);
    SDValue Im3Val = SDValue(CurDAG->getMachineNode(LE1::ADD, dl, MVT::i32, 
                                                    Im2Val, Im1Val), 0);
    SDValue Im4Val = SDValue(CurDAG->getMachineNode(LE1::SHR, dl, MVT::i32, 
                                                  Im3Val, ShiftImm), 0);
    SDValue HHVal = SDValue(CurDAG->getMachineNode(LE1::MULHH, dl, MVT::i32, 
                                                   MulOp1, MulOp2), 0);
    return CurDAG->getMachineNode(LE1::ADD, dl, MVT::i32, HHVal, Im4Val);
    break;
  }*/
  case LE1ISD::Addcg: {
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    SDValue Cin = Node->getOperand(2);
    return CurDAG->getMachineNode(LE1::ADDCG, dl, MVT::i32, MVT::i1, 
                                  LHS, RHS, Cin);
    break;
  }
  case LE1ISD::Divs: {
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    SDValue Cin = Node->getOperand(2);
    return CurDAG->getMachineNode(LE1::DIVS, dl, MVT::i32, MVT::i1,
                                  LHS, RHS, Cin);
    break;
  }
    //FIXME instructions should be given node names so selection is automatic
  case LE1ISD::MTB:
    return CurDAG->getMachineNode(LE1::MTB, dl, MVT::i1, Node->getOperand(0));
    break;
 case LE1ISD::MFB:
    return CurDAG->getMachineNode(LE1::MFB, dl, MVT::i32, Node->getOperand(0));
    break;
 case LE1ISD::Sh1Add: {
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(LE1::SH1ADD, dl, MVT::i32, LHS, RHS);
    break;
  }
  case LE1ISD::Orc: {
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(LE1::ORC, dl, MVT::i32, LHS, RHS);
    break;
  }
  case LE1ISD::SET_ATTR: {
    SDValue Chain = Node->getOperand(0);
    SDValue Value = Node->getOperand(1);
    SDValue Addr = Node->getOperand(2);
    SDNode *Result = CurDAG->getMachineNode(LE1::SetAttr, dl, MVT::Other,
                                            Value, Addr, Chain);
    //ReplaceUses(Node, Result);
    return Result;
    break;
  }
  case LE1ISD::NUM_CORES:
    return CurDAG->getMachineNode(LE1::LE1_NUM_CORES, dl, MVT::i32);
  }

  // Select the default instruction
  //std::cout << "Selecting the default instruction\n";
  SDNode *ResNode = SelectCode(Node);

  //std::cout << "Selected instruction = " << ResNode->getOperationName()
    //<< "\n";

  DEBUG(errs() << "=> ");
  if (ResNode == NULL || ResNode == Node)
    DEBUG(Node->dump(CurDAG));
  else
    DEBUG(ResNode->dump(CurDAG));
  DEBUG(errs() << "\n");
  return ResNode;
}/*
SDNode* LE1DAGToDAGISel::
SelectExtLoad(SDNode *Node) {
  std::cout << "ExtLoad with TargetGlobal\n";

  LoadSDNode *LoadNode = cast<LoadSDNode>(Node);
  SDValue Chain = LoadNode->getChain();
  EVT VT = LoadNode->getMemoryVT();
  SDNode *Result;
  ISD::MemIndexedMode AM = LoadNode->getAddressingMode();
  bool zext = (LoadNode->getExtensionType() == ISD::ZEXTLOAD);
  unsigned Opcode;

  if(VT == MVT::i16)
    Opcode = zext ? LE1::LDHu_G : LE1::LDH_G;
  else if(VT == MVT::i8)
    Opcode = zext ? LE1::LDBu_G : LE1::LDB_G;
  else
    llvm_unreachable("unknown memory type");

  std::cout << "Load Opcode = " << Opcode << std::endl;
  return SelectCode(Node);
}*/

SDNode* LE1DAGToDAGISel::
SelectLoad(SDNode *Node) {
  SDLoc dl(Node);
  LoadSDNode *LoadNode = cast<LoadSDNode>(Node);
  SDValue Chain = LoadNode->getChain();
  EVT VT = LoadNode->getMemoryVT();
  SDNode *Result;
  ISD::MemIndexedMode AM = LoadNode->getAddressingMode();
  bool zext = (LoadNode->getExtensionType() == ISD::ZEXTLOAD);
  unsigned Opcode;

  if(VT == MVT::i32)
    Opcode = LE1::LDW_G;
  else if(VT == MVT::i16)
    Opcode = zext ? LE1::LDHu_G : LE1::LDH_G;
  else if(VT == MVT::i8)
    Opcode = zext ? LE1::LDBu_G : LE1::LDB_G;
  else
    llvm_unreachable("unknown memory type");

  //std::cout << "Load Opcode = " << Opcode << std::endl;
  if(AM == ISD::UNINDEXED) {
    //std::cout << "Unindexed\n";
    //std::cout << "NumOperands = " << Node->getNumOperands() << std::endl;
    //std::cout << "BaseOffset load\n";
    SDNode *Target = LoadNode->getBasePtr().getNode();
    if(Target->getOpcode() == LE1ISD::TargetGlobal &&
      ISD::isNormalLoad(LoadNode)) {
      //std::cout << "Base is TargetGlobal\n";
      SDValue Base = Target->getOperand(0);
      //std::cout << "Got base\n";
      int64_t Offset = cast<GlobalAddressSDNode>(Base)->getOffset();
      MVT PointerTy = getTargetLowering()->getPointerTy();
      const GlobalValue *GV = cast<GlobalAddressSDNode>(Base)->getGlobal();
      SDValue TargetAddr = CurDAG->getTargetGlobalAddress(GV, dl,
                                                            PointerTy, 0);
      SDValue TargetConstantOff = CurDAG->getTargetConstant(Offset, PointerTy);
      Result = CurDAG->getMachineNode(Opcode, dl, VT, MVT::Other, TargetAddr,
                                      TargetConstantOff, Chain);
      MachineSDNode::mmo_iterator MemOp = MF->allocateMemRefsArray(1);
      MemOp[0] = LoadNode->getMemOperand();
      cast<MachineSDNode>(Result)->setMemRefs(MemOp, MemOp+1);
      ReplaceUses(LoadNode, Result);
      //std::cout << "Returning result\n";
      return Result;
      //return CurDAG->SelectNodeTo(Node, LE1::ADD, VT, MVT::Glue,
        //                        LHS, SDValue(AddCarry,0));

    }
  }
  else{
    //std::cout << "Indexed load\n";
  }
  return SelectCode(Node);
}

SDNode* LE1DAGToDAGISel::
SelectStore(SDNode *Node) {
  //std::cout << "SelectStore\n";
  SDLoc dl(Node);
  StoreSDNode* StoreNode = cast<StoreSDNode>(Node);
  SDValue Chain = StoreNode->getChain();
  //SDNode* TargetGlobal = StoreNode->getBasePtr().getNode();
  SDNode* TargetGlobal = StoreNode->getOperand(2).getNode();
  EVT VT = StoreNode->getMemoryVT();
  SDValue Value = StoreNode->getValue();
  unsigned Opcode = 0;

  if(VT == MVT::i32)
    Opcode = LE1::STW_G;
  else if(VT == MVT::i16)
    Opcode = LE1::STH_G;
  else if(VT == MVT::i8)
    Opcode = LE1::STB_G;
  else
    llvm_unreachable("unknown memory type");

  //std::cout << "Opcode = " << Opcode << std::endl;
  //SDValue Base = StoreNode->getOperand(2);
  if(TargetGlobal->getOpcode() == LE1ISD::TargetGlobal) {
    //std::cout << "is TargetGlobal\n";
    SDValue Base = TargetGlobal->getOperand(0);
    int64_t Offset = cast<GlobalAddressSDNode>(Base)->getOffset();
    //SDValue Offset = StoreNode->getOperand(3);
    //std::cout << "Offset = " << Offset << std::endl;
    MVT PointerTy = getTargetLowering()->getPointerTy();
    const GlobalValue* GV = cast<GlobalAddressSDNode>(Base)->getGlobal();
    SDValue TargetAddr = CurDAG->getTargetGlobalAddress(GV, dl, PointerTy, 0);
    SDNode* Result =
      CurDAG->getMachineNode(Opcode, dl, MVT::Other, Value, TargetAddr,
                             CurDAG->getTargetConstant(Offset, PointerTy));
    MachineSDNode::mmo_iterator MemOp = MF->allocateMemRefsArray(1);
    MemOp[0] = StoreNode->getMemOperand();
    cast<MachineSDNode>(Result)->setMemRefs(MemOp, MemOp+1);
    ReplaceUses(StoreNode, Result);
    return Result;
  }

  return SelectCode(StoreNode);
}

bool LE1DAGToDAGISel::
SelectInlineAsmMemoryOperand(const SDValue &Op, char ConstraintCode,
                             std::vector<SDValue> &OutOps) {
  assert(ConstraintCode == 'm' && "unexpected asm memory constraint");
  OutOps.push_back(Op);
  return false;
}

/// createLE1ISelDag - This pass converts a legalized DAG into a
/// LE1-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createLE1ISelDag(LE1TargetMachine &TM) {
  return new LE1DAGToDAGISel(TM);
}
