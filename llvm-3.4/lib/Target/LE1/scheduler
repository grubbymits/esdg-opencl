#include "llvm/CodeGen/DFAPacketizer.h"
#include "llvm/CodeGen/Passes.h"
#include "llvm/CodeGen/MachineDominators.h"
#include "llvm/CodeGen/MachineFunctionPass.h"
#include "llvm/CodeGen/MachineLoopInfo.h"
#include "llvm/CodeGen/ScheduleDAG.h"
#include "llvm/CodeGen/ScheduleDAGInstrs.h"
#include "llvm/CodeGen/LatencyPriorityQueue.h"
#include "llvm/CodeGen/SchedulerRegistry.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/MachineFunctionAnalysis.h"
#include "llvm/CodeGen/ScheduleHazardRecognizer.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Target/TargetInstrInfo.h"
#include "llvm/Target/TargetRegisterInfo.h"
#include "llvm/ADT/DenseMap.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/Debug.h"
#include "LE1.h"
#include "LE1TargetMachine.h"
#include "LE1RegisterInfo.h"
#include "LE1Subtarget.h"
#include "LE1MachineFunction.h"

#include <map>
#include <iostream>

using namespace llvm;

namespace {
  class LE1Scheduler: public MachineFunctionPass {
  public:
    static char ID;
    LE1Scheduler() : MachineFunctionPass(ID) {}

    void getAnalysisUsage(AnalysisUsage &AU) const {
      AU.setPreservesCFG();
      AU.addRequired<MachineDominatorTree>();
      AU.addPreserved<MachineDominatorTree>();
      AU.addRequired<MachineLoopInfo>();
      AU.addPreserved<MachineLoopInfo>();
      MachineFunctionPass::getAnalysisUsage(AU);
    }

    const char *getPassName() const {
      return "LE1 Bundler";
    }

    bool runOnMachineFunction(MachineFunction &MF);
  };

  char LE1Scheduler::ID = 0;


  class LE1VLIWScheduler : public ScheduleDAGInstrs {

    std::vector<MachineInstr*> CurrentBundleMIs;
    DFAPacketizer *ResourceTracker;
    std::map<MachineInstr*, SUnit*> MIToSUnit;
    //std::vector<SUnit*> ReorderedUnits;

    public:
      LE1VLIWScheduler(MachineFunction &MF, MachineLoopInfo &MLI,
                       MachineDominatorTree &MDT,
                       DFAPacketizer *RT);
      //~LE1VLIWScheduler();
      void schedule();
      void bundleMIs(MachineBasicBlock *MBB,
                    MachineBasicBlock::iterator BeginItr,
                    MachineBasicBlock::iterator EndItr);

      //DFAPacketizer *getResourceTracker() { return ResourceTracker; }

    private:
      void addToBundle(MachineInstr *MI);
      void endBundle(MachineBasicBlock *MBB, MachineInstr *MI);
      bool ignorePseudoInstruction(MachineInstr *I,
                                           MachineBasicBlock *MBB);
      bool isSoloInstruction(MachineInstr *MI);
      bool isLegalToBundleTogether(SUnit *SUI, SUnit *SUJ);
  };

}

bool LE1Scheduler::runOnMachineFunction(MachineFunction &MF) {
  const TargetMachine &TM = MF.getTarget();
  const TargetInstrInfo *TII = MF.getTarget().getInstrInfo();
  MachineLoopInfo &MLI = getAnalysis<MachineLoopInfo>();
  MachineDominatorTree &MDT = getAnalysis<MachineDominatorTree>();
  DFAPacketizer *ResourceTracker = TII->CreateTargetScheduleState(&TM, 0);

  // Instantiate the packetizer
  LE1VLIWScheduler Scheduler(MF, MLI, MDT, ResourceTracker);
  //assert(Scheduler.getResourceTracker() && "Empty DFA Table");
  assert(ResourceTracker && "Empty DFA Table");

  // Loop over all basic blocks and remove KILL pseudo-instructions
  for(MachineFunction::iterator MBBb = MF.begin(), MBBe = MF.end();
      MBBb != MBBe; ++MBBb) {
    MachineBasicBlock::iterator End = MBBb->end();
    MachineBasicBlock::iterator MI = MBBb->begin();
    while (MI != End) {
      if(MI->isKill()) {
        MachineBasicBlock::iterator DeleteMI = MI;
        ++MI;
        MBBb->erase(DeleteMI);
        End = MBBb->end();
        continue;
      }
      ++MI;
    }
  }

  for(MachineFunction::iterator MBBb = MF.begin(), MBBe = MF.end();
      MBBb != MBBe; ++MBBb) {
    // Find scheduling regions and packetize each of them
    unsigned RemainingCount = MBBb->size();
    for(MachineBasicBlock::iterator RegionEnd = MBBb->end();
        RegionEnd != MBBb->begin();) {
      MachineBasicBlock::iterator I = RegionEnd;
      for(;I != MBBb->begin(); --I, --RemainingCount) {
        if(TII->isSchedulingBoundary(llvm::prior(I), MBBb, MF))
          break;
      }
      I = MBBb->begin();

      // Skip empty scheduling regions
      if(I == RegionEnd) {
        RegionEnd = llvm::prior(RegionEnd);
        --RemainingCount;
        continue;
      }
      // Skip regions with one instruction
      if(I == llvm::prior(RegionEnd)) {
        RegionEnd = llvm::prior(RegionEnd);
        continue;
      }

      // if(CurrentPacketMIs.size() <
      //    ResourceTracker->getInstrItins()->Props.IssueWidth)
      //Packetizer.PacketizeMIs(MBBb, I, RegionEnd);
      Scheduler.bundleMIs(MBBb, I, RegionEnd);
      RegionEnd = I;
    }
  }
  DEBUG(dbgs() << "\nDeleting ResourceTracker");
  delete ResourceTracker;
  DEBUG(dbgs() << "\nLeaving Bundler Pass");
  return true;
}


static bool doesModifyCalleeSavedRegs(MachineInstr *MI,
                                      const TargetRegisterInfo *TRI) {
  for(const uint16_t *CSR = TRI->getCalleeSavedRegs(); *CSR; ++CSR) {
    unsigned CalleeSavedReg = *CSR;
    if(MI->modifiesRegister(CalleeSavedReg, TRI))
      return true;
  }
  return false;
}

static bool isControlFlow(MachineInstr *MI) {
  //if((MI->isCall()) || (MI->isBranch()) || (MI->isReturn()))
  return (MI->getDesc().isTerminator() || MI->getDesc().isCall());
    //return true;
  //else
    //return false;
}

static bool isDirectJump(MachineInstr *MI) {
  if(MI->getOpcode() == LE1::GOTO)
    return true;
  else
    return false;
}

LE1VLIWScheduler::LE1VLIWScheduler(MachineFunction &MF,
                                   MachineLoopInfo &MLI,
                                   MachineDominatorTree &MDT,
                                   DFAPacketizer *RT)
  : ScheduleDAGInstrs(MF, MLI, MDT, true) {
  ResourceTracker = RT;
    CanHandleTerminators = true;
}
/*
LE1VLIWScheduler::~LE1VLIWScheduler() {
  DEBUG(dbgs() << "\nDestructing LE1VLIWScheduler");
  if(ResourceTracker)
    delete ResourceTracker;
  DEBUG(dbgs() << "\nDeleted ResourceTracker\n");
}*/

void LE1VLIWScheduler::schedule() {
  buildSchedGraph(0);
}

void LE1VLIWScheduler::bundleMIs(MachineBasicBlock *MBB,
                                   MachineBasicBlock::iterator BeginItr,
                                   MachineBasicBlock::iterator EndItr) {
  startBlock(MBB);
  enterRegion(MBB, BeginItr, EndItr, MBB->size());
  schedule();

  LatencyPriorityQueue AvailableQueue;
  //std::vector<MachineInstr*> OldBB;
  unsigned BasicBlockSize = SUnits.size();
  unsigned IssueWidth = ResourceTracker->getInstrItins()->Props.IssueWidth;

  DEBUG(dbgs() << "\n!!! REORDERING '" << BB->getFullName() << "', IT CONTAINS "
        << BB->size() << " INSTS !!!");

  //if(!ReorderedUnits.empty())
    //ReorderedUnits.clear();

  //std::cout << "generating MI -> SU map\n";
  // Generate MI -> SU map
  MIToSUnit.clear();
  //std::cout << "SUnits size = " << SUnits.size() << std::endl;
  for (unsigned i = 0, e = SUnits.size(); i != e; ++i) {
    SUnit *SU = &SUnits[i];
    MIToSUnit[SU->getInstr()] = SU;
  }

  //std::cout << "free entry successors\n";
  // Free EntrySU successors
  for(unsigned i = 0, e = SUnits.size(); i != e; ++i) {
    if(EntrySU.isSucc(&SUnits[i]))
      SUnits[i].NumPredsLeft--;
  }


  // First, empty the BB by iterating through it, removing each inst
  // Then, when an instruction is scheduled MBB->push_back(MI); instead of
  // using ReorderedUnits.
  DEBUG(dbgs() << "\nSize of MBB = " << MBB->size());
  for(unsigned i = 0, e = MBB->size(); i != e; ++i) {
    //OldBB.push_back(MBB->remove(BeginItr));
    DEBUG(dbgs() << "\nPopping " << MBB->front().getOpcode());
    MBB->pop_front();
  }

  //std::cout << "initialising AvailableQueue\n";
  AvailableQueue.initNodes(SUnits);

  //  The main rescheduler loop, get the size of the basic block and iterate that
  //  many times, including incrementing the counter for pseudoInsts.
  while (MBB->size() < BasicBlockSize) {
    //std::cout << "Current size of MBB = " << MBB->size() << std::endl;
    // Populate the AvailableQueue with the leaves of the DAG
    //for(BeginItr = MBB->begin(), EndItr = MBB->end(); BeginItr != EndItr;
        //++BeginItr) {
      //SUnit *SU = MIToSUnit[BeginItr];
    for(unsigned i = 0, e = SUnits.size(); i != e; ++i) {

      SUnit *SU = MIToSUnit[SUnits[i].getInstr()];

      if(SU->Preds.empty() && !SU->isScheduled) {
      //if(SUnits[i].Preds.empty() && !SUnits[i].isScheduled) {
        //for(SUnit::pred_iterator I = SUnits[i].Preds.begin(),
            //E = SUnits[i].Preds.end(); I != E; ++I) {
        for(SUnit::pred_iterator I = SU->Preds.begin(), E = SU->Preds.end();
            I != E; ++I) {
          DEBUG(dbgs() << "\n" << SU->getInstr()->getOpcode() << " preds are "
                    << I->getSUnit()->getInstr()->getOpcode()
                    << " of type " << I->getKind());
        }
        //AvailableQueue.push(&SUnits[i]);
        //std::cout << "adding leaf to available queue\n";
        AvailableQueue.push(SU);
        //MBB->erase(BeginItr);
        //SUnits[i].Available = true;
      }
    }
    std::vector<SUnit*> CheckedUnits;
    std::vector<SUnit*> BundledUnits;
    MachineInstr *MI = NULL;

    while(!AvailableQueue.empty() && BundledUnits.size() < IssueWidth ){

      SUnit *SU = AvailableQueue.pop();
      assert(SU && "Missing SUnit info!");
      MI = SU->getInstr();
      //std::cout << "\nPopped SU off AvailableQueue, Opcode = " << MI->getOpcode() << std::endl;
      if (ignorePseudoInstruction(MI, MBB)) {
        // Just add it to back into the BB
        //ReorderedUnits.push_back(SU);
        //std::cout << "It's a pseudo\n";
        MBB->push_back(MI);
        SU->isScheduled = true;
        continue;
      }
      else if (isSoloInstruction(MI)) {
        // Means it's a label, so just add it back and endBundle
        //ReorderedUnits.push_back(SU);
        //std::cout << "It's a solo\n";
        MBB->push_back(MI);
        SU->isScheduled = true;
        endBundle(MBB, MI);
        continue;
      }
      else {
        // Check whether this instruction could be bundled with the other current
        // instructions.
        //assert(SU && "Missing SUnit Info!");
        bool ResourceAvail = ResourceTracker->canReserveResources(MI);
        if(ResourceAvail) {
          //std::cout << "Resources are available\n";
          if(BundledUnits.empty()) {
            //ResourceTracker->reserveResources(MI);
            BundledUnits.push_back(SU);
            MBB->push_back(MI);
            addToBundle(MI);
            //std::cout << "Bundle is empty, so packing\n";
            SU->isScheduled = true;
          }
          else {
            for (std::vector<SUnit*>::iterator VI = BundledUnits.begin(),
              VE = BundledUnits.end(); VI != VE; ++VI) {
              //MachineInstr *MJ = *VI;
              //SUnit *SUJ = MIToSUnit[MJ];
              assert(*VI && "Missing SUnit Info!");

              // Is it legal to packetize SUI and SUJ together.
              if (isLegalToBundleTogether(SU, *VI)) {
                //ResourceTracker->reserveResources(MI);
                BundledUnits.push_back(SU);
                MBB->push_back(MI);
                addToBundle(MI);
                //std::cout << "Is legal to pack\n";
                SU->isScheduled = true;
              }
              else {
                //std::cout << "Is not legal to pack\n";
                CheckedUnits.push_back(SU);
                break;
              }
            } // For all instructions in CurrentPacketMIs.
          }
        }
        else {
          //std::cout << "Resources are not available\n\n";
          CheckedUnits.push_back(SU);
        }
      }
    }
    // Either all the available queue is empty, or the packet size has reached
    // it's limit, or there are not the resources available for the remaining
    // instructions, or there's no ILP. So, update the queue, removing it which
    // nodes have been scheduled.
    //std::cout << "\nLeft the inner loop\n\n";

    // TODO check using isScheduled to skip some tests?
    // Get all the preds between BundledUnits and SUnits and remove them
    for(unsigned i = 0, j = BundledUnits.size(); i != j; ++i) {
      for(unsigned k = 0, l = SUnits.size(); k != l; ++k) {
        //if(!SUnits[k].isScheduled) {
          for( SUnit::pred_iterator predI = SUnits[k].Preds.begin(),
             predEnd = SUnits[k].Preds.end(); predI != predEnd; ++predI)
            if(predI->getSUnit() == BundledUnits[i]) {
              //std::cout << "Removing pred of kind " << predI->getKind() <<
                //" between " << SUnits[k].getInstr()->getOpcode() <<
                //" and " << BundledUnits[i]->getInstr()->getOpcode() << std::endl;
              SUnits[k].removePred(*predI);
            }
        //}
      }
      //ReorderedUnits.push_back(BundledUnits[i]);
      //MBB->push_back(BundledUnits[i]);
    }

    // Add the failed instructions back to the AvailableQueue
    AvailableQueue.push_all(CheckedUnits);
    //if(!ignorePseudoInstruction(MI, MBB))
      endBundle(MBB, MI);
  }

/*
  std::cout << "adding instructions back into BB\n";
  for(MachineBasicBlock::iterator I = NewBB.begin(), E = NewBB.end(); I != E;
      ++ I) {
    MachineInstr *MI = NewBB.remove(I);
    MBB->push_back(MI);
  }*/

  // By the end, SUnits should be ordered taking into consideration the
  // resources available as well as the dependencies.
  //endBundle(MBB, MBB->end());
  //endBundle(MBB, MI);
  exitRegion();
  finishBlock();
  DEBUG(dbgs() << "\n!!! LEAVING REORDER !!!");
  //if(SUnits.size() != ReorderedUnits.size())
    //std::cout << "ERROR - Reordered size = " << ReorderedUnits.size()
      //<< " while original size = " << SUnits.size() << std::endl;

}

void LE1VLIWScheduler::addToBundle(MachineInstr *MI) {
  MachineBasicBlock::iterator MII = MI;
  CurrentBundleMIs.push_back(MI);
  ResourceTracker->reserveResources(MI);
  //return MII;
}

void LE1VLIWScheduler::endBundle(MachineBasicBlock *MBB,
                                    MachineInstr *MI) {
  DEBUG(dbgs() << "\nendBundle");
  DEBUG(dbgs() << "\nOpcode = " << MI->getOpcode());
  if (CurrentBundleMIs.size() > 1) {
    //DEBUG(dbgs() << "\npacket size > 1");
    MachineInstr *MIFirst = CurrentBundleMIs.front();
    finalizeBundle(*MBB, MIFirst, MI);
  }
  CurrentBundleMIs.clear();
  ResourceTracker->clearResources();
}

bool LE1VLIWScheduler::
ignorePseudoInstruction(MachineInstr *I, MachineBasicBlock *MBB) {
  if(I->isDebugValue()) {
    //DEBUG(dbgs() << "\nisDebugValue " << I->getOpcode());
    return true;
  }

  const MCInstrDesc& TID = I->getDesc();
  unsigned SchedClass = TID.getSchedClass();
  const InstrStage* IS =
                    ResourceTracker->getInstrItins()->beginStage(SchedClass);
  unsigned FuncUnits = IS->getUnits();
  return !FuncUnits;
}

bool LE1VLIWScheduler::
isSoloInstruction(MachineInstr *MI) {
  if(MI->isEHLabel())
    return true;

  return false;
}

// SUJ is the instruction currently in the packet, SUI is
// the next instruction to be packetized. SUnits are nodes
// of ScheduleDAG.
bool LE1VLIWScheduler::
isLegalToBundleTogether(SUnit *SUI, SUnit *SUJ) {
  //DEBUG(dbgs() << "\nisLegalToPacketize?");
  MachineInstr *I = SUI->getInstr();
  MachineInstr *J = SUJ->getInstr();
  assert(I && J && "Unable to packetize null instructions");

  bool FoundSequentialDependence = false;

  //const MCInstrDesc &MCIDI = I->getDesc();
  const MCInstrDesc &MCIDJ = J->getDesc();

  //const LE1RegisterInfo *RI = (const LE1RegisterInfo*) TM.getRegisterInfo();
  //const LE1InstrInfo *II = (const LE1InstrInfo*) TII;

  // Labels are not bundled
  if(I->isLabel())
    return false;

  // Effectively endPacket once a call has been inserted
  if(J->getOpcode() == LE1::CALL ||
     J->getOpcode() == LE1::LNKCALL)
    return false;

  // Only allowed one control-flow instruction. There's only one functional
  // unit to handle control-flow so this shouldn't be ever be true
  if(isControlFlow(I) && isControlFlow(J)) {
    DEBUG(dbgs() << "\nDependence = true, already a control-flow instr in packet");
    return false;
  }

  // Check for dependences: SDep::Kind Data, Anti, Output and Order
  if (SUJ->isSucc(SUI)) {
    for(unsigned i=0;
        i < SUJ->Succs.size() && !FoundSequentialDependence; ++i) {

      if(SUJ->Succs[i].getSUnit() != SUI)
        continue;

      //const TargetRegisterClass* RC = NULL;
      SDep::Kind DepType = SUJ->Succs[i].getKind();

      // Data (true dependences) are not allowed
      if(DepType == SDep::Data) {
        // Check if the immediates are used, then the dependence can be removed
        // TODO make this more general to handle other instances
        /*if(J->getOpcode() == LE1::SUBi) {
          if(I->getOpcode() == LE1::STW) {
            if(J->getOperand(0).getReg() == LE1::SP) {
              int64_t stackDecrement = J->getOperand(2).getImm();
              int64_t offset = I->getOperand(2).getImm();
              I->getOperand(2).setImm(offset-stackDecrement);
            }
          }
        }
        else {*/
          DEBUG(dbgs() << "\nDependence is true. " << I->getOpcode() << " and " <<
                J->getOpcode() << " have data dependences");
          return false;
        }
      //}

      // Ignore the order of unconditional jumps/calls and non control-flow
      // instructions
      else if(isDirectJump(I) &&
              !MCIDJ.isBranch() &&
              !MCIDJ.isCall() &&
              (DepType == SDep::Order)) {
         DEBUG(dbgs() << "\nOrder dependence between " << I->getOpcode() << " and "
              << J->getOpcode());
     }

      else if(DepType == SDep::Order)
        DEBUG(dbgs() << "\nOrder dependence between " << I->getOpcode() << " and "
              << J->getOpcode());

      // Anti (WAR) can be ignored since operations within a
      // bundle are treated as atomic.
      else if(DepType == SDep::Anti) {
        DEBUG(dbgs() << "\nAnti-dependence between " << I->getOpcode() << " and "
              << J->getOpcode());
      }

      // Output (WAW) select register allocator to rename..?
      else if(DepType == SDep::Output)
        DEBUG(dbgs() << "\nOutput dependence between " << I->getOpcode() << " and "
              << J->getOpcode());
    }
  }

  return true;
}

// Public Constructor Function
FunctionPass *llvm::createLE1Scheduler(LE1TargetMachine &TM) {
  return new LE1Scheduler();
}
